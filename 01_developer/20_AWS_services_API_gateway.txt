Example : Building a Serverless API

Client --REST--> API GAteway <-------proxing-----> Lanbda <------crud-------> DynamoDB
-----------------------------------------------------------------------------------------
AWS API Gateway 
	 AWS Lambda + API Gateway : No infrastructure to manage
	Support for the WebSocket Protocol
	Handle API version (V1,V2...)
	Handle different environments (dev, test, prod ...)
	Handle security (Authentication and Authorization)
	Create  API keys, handle request throttling
	Swagger/OPenApi import to quickly defite APIs
	Transform and validate requests and responses
	Genetate SDK and API specifications
	Cache API responses
-----------------------------------------------------------------------------------------
API Gateway - Integration High Level
	Lambda Function 
		Invoke Lambda function
		Easy Way to expose REST API backed by AWS Lambda
	HTTP
		Expose HTTP endpoints in the backend 
		Example: internal HTTP API on premise. Application load balancer...
		Why? Add rate limits, caching, user authentications, API keys, etc..
	AWS Service
		Expose any AWS API through the API Gateway?
		Example : start an AWS Setup Function workflow. post a message to SQS
		Why? add authentication, deplouy publicly, rate control...
-----------------------------------------------------------------------------------------
API Gateway - AWS Service Integration Kinesisi Data Streams example
	
	Example : 
		CLient ---ewquest---> API GAteway ---send---> Kinesis Data Strema---records---> Kinesisi Data Firehose---store .json--->S3
-----------------------------------------------------------------------------------------
API GAteway - Endpoint Types
	Edge-Optimized (default): For global client
		Requests are routed through the CloudFront Edge locations (improves latency)
		The API Gateway still lives in only one region
	Regional:
		For clients within the sate region
		Could manually combine with CloudFront (more control over the caching strategies and the distribution)
	Private: 
		Can only be accessed from your VPC using an interface VPC endpoint (ENI)
		Use a resource policy to define access
------------------------------------------------------------------------------------------
API GAteway - Security
	User Authentication through
		IAM Roles (usefull for internal applications)
		Cognito (identity for external users - example mobile users)
		Custom Authorizer (your own logic)
	Custom Domain Names HTTPS security through integratoin with AWS Certificate Manager (ACM)
		If using Edge-Optimized endpoint, then certificate must be in us-east-1
		If using Regional endpoint, the certificate must be in the API Gateway region
		Must Setup CNAME or A-alias record in Route 53
==========================================================================================
API Gateway - Deployment Stages
	Making changes in the API Gateway does not mean they're effective
	You need to make a "deployment" for them to be in effect
	It's a common source of confusion
	Changes are deployed to "Stages" (as meny as you want)
	Use the naming you like for stages (dev, test, prod)
	Each stage has it's own configueation parameters
	Stages can be rolled back as a history of deployments is kept
------------------------------------------------------------------------------------------
API Gateway - Stage v1 and v2 API breaking changes

	V1 client -----https://.../v1---> API Gateway v1 stage----> Lambda V1
        V1 client -----https://.../v2---> API Gateway v2 stage----> Lambda V2

after testing v1 - will be turned off 
------------------------------------------------------------------------------------------
API GAteway Stage Variables
	Stage variables are like environment variables for API Gateway 
	Use them to change often changing configuration values
	They can be used in :
		Lambda function ARN
		HTTP Endpoint
		Parameter mapping template
	Use cases:
		Configure HTTP endpoints your stages talk to (dev, test, prod)
		Pass configuration parameters to AWS Lambda through mapping templates
	Stage variables are passed to the "context" object in AWS Lambda
	Format : ${stageVariables.variableName}
-------------------------------------------------------------------------------------------
API Gateway Stage Variables  & Lambda ALiases
	We create a stage variable to indicate the corresponding Lambda alias 
	Our API gateway will automatically invoke the right Lambda function!

	
	                 API GW Prod Stage -------> PROD ALIAS ----95%--->Lambda V1 
	                                                              | 5%
					                           
No API Gateway changes   API GW Test Stage -------> TEST ALIAS ----100%--->Lambda V2
                         API GW Dev Stage -------> DEV ALIAS ----100%--->Lambda $LATEST
============================================================================================
configure dev, prod test envs with gateway:
	1. configure lambda
	2. "publish new versions 1 ,2" 
	3. create ALiases (DEV TEST PROD) for versions ($LATEST, 2, 1)
	4. GW--> Stages --> Create 
	5. in GW -> Resources -> Create Resource (endpoint name)
	6. in GW -Resources-> create Method (get, post ... for resource)
		set Lambda Proxy integration
		set lambda Function-name:${stageVariable.lambdaAlias}
	7. add policy(Lambda Resource Base Policy) with console for every alias
	8 in GW --> Resources--> click test  with  variable "lambdaAlias=[DEV, TEST or PROD]"
	9. in GW -->Resources-->Actions --> Deploy API
	10. GW -> Stages --> [Stage name] --> Stage Variables--> Add variable [lambdaAlias=<Stage Name>]
	11.  Click on Stage Name to get 'Invoke URL:'
==============================================================================================
API GAteway - Canary Deployment
	Possibility to enable canary deployments for any stage (usually prod)
	Choose the % of traffic the Canary channel receives

		---95%----Prod GW (Prod Stage)------> Lambda V1
	Client 
                ---5%----Staging GW (Stadging Stage)------> Lambda V2

	Metrics & Logs are separate (for better monitoring)
	Possibility to override stage variables for canary
	This is blue/green deployment with AWS Lambda & API Gatewa
==============================================================================================
API Gateway - Integration Types
	Integration Type MOCK
		API Gateway returns a response without sending the request to the backend

	Integration type HTTP / AWS (Lambda & AWS Service)
		you must configure both the integration request and integration response
		Setup Data mapping templates for the request & response

		Client <----REST API------>API GW + Mapping Template<-------AWS Service Integration----->SQS Queue
------------------------------------------------------------------------------------------------
API Gateway - Integration Types
	Integration Type AWS_PROXY (Lambda Proxy):
		incoming request from the client is the input to Lambda
		The function is responsible for the logic of request/response
		No Mapping template, headers, query string parameters... are passed as arguments
	Integration Type HTTP_PROXY
		No mapping template
		The HTTP request is passed to the backend
		The HTTP response from the backend is forwarded by API Gateway
		Possible to add HTTP Headers if need be (ex:API key)

	Example:
	
client <------HTTP request---->API Gateway<-----HTTP_PROXY------>ALB
	
-------------------------------------------------------------------------------------------------
Mapping Templates (AWS & HTTP Integration)
	Mapping templates can be used to modify request/Response
	Rename /Modify query strings parameters
	Modify body content
	Add headers
	Uses Velocity Template Language (VTL): for loop, if etc...
	Filter output results(remove unnecessary data)
	Content-Type can be set to 'application/json' or 'application/xml'
-------------------------------------------------------------------------------------------------
Mapping Example : JSON to XML with SOAP
	SOAP API are XML based, whereas REST API are JSON based
	
	client<---RESTfull, JSON Payload----> API GW + Mapping Template <----XML Payload----->SOAP API

	In this case, API Gateway should :
		Extract Data from the request: either path, payload or Header
		Build SOAP message based on request data (mapping template)
		Call SOAP service and receive XML response
		Transform XML response to desired format (like JSON), and respond to the user
--------------------------------------------------------------------------------------------------
API Gateway - OpenAPI spec
	Common way of defining REST APIs, using API definition as code
	Import existing OpenAPI 3.0 spec to API Gateway
		Method
		Method Request
		Integration Request
		Methos Response
		+ AWS extensions for API gateway and setup every single option
	Can export current API as OpenAPI spec
	OpenAPI specs can be writen in YAML or JSON
	Using OpenAPI we can generate SDK for our applications
--------------------------------------------------------------------------------------------------
REST API - Request Validation
	You can configure API Gateway to perform basic validation of an API request before producing with the integration request
	When the validation fails, API Gateway immediately fails the request
		Returns a 400 error response to the caller
	This reduces unnecessary calls to the backend
	Checks:
		The required request parameters in the URI, query string, and headers of an incomming request are included and non-blank
		The applicable request payload adheres to the configured JSON Schema request model of the method
----------------------------------------------------------------------------------------------------
REST API - RequestValidation - OpenAPI
	Setup request validation by importing OpenAPI definitions file
====================================================================================================
Caching API responces
	Caching reduces the number of calls made to the backend
	Default TTL (time to live) is 300 seconds (min: 0s, max:3600s)
	Caches are defined per stage
	Possible to override cache settings per methos
	Cache encryption option
	Cache capacity between 0.5 GB to 237GB
	Cache is expensive, makes sense in production, may not make sense in dev/test
------------------------------------------------------------------------------------------------------
API  Gateway Cache Invalidation
	Able to flush the entire cache (invalidate it) immediately (with UI)
	Clients can invalidate the cache with header: Cache-control : max-age=0 (with proper IAM authorization)
	If you don't impose an InvalidateCache policy (or choose the Require authorization checkbox in the console), any client can invalidate the API cache
======================================================================================================
API Gateway - Usage Plans & API Keys
	If you wand to make an API available as an offering ($) to your customers
	Usage Paln:
		who can access one or more deployed API stages and methods
		how much and how fast they can access them
		uses API keys to identify API clients and meter access
		configure throttling limits and quote limits that are enforced on individual client
	API Keys:
		alphanumeric string values to distribute to your customers
		Ex: vljasfashfvoihasjkvjaoijaskldjvaslkvl
		Can use with usage plans to control access
		Throttling limits are applied to the API keys
		Quotas limits is the overall number of maximum requests
------------------------------------------------------------------------------------------------------
API GAteway - Correct Order for API keys
	To configure a usage plan 
		1. Create one or more APIs, configure the methods to require an API key, and deploy the APIs to stages.
		2. Generate or import API keys to distribute to application developers (your customers) who will be using your API
		3. Create the usage plan with the desired throttle and quota limits.
		4. Associate API stages and API keys with the usage plan.
	Callers of the API must supply an assigned API key in the x-api-key header in requests to the API. 
========================================================================================================
API Gateway - Logging & Tracing
	CloudWatch Logs
		Log contains information about request/response body
		Enable CloudWatch logging at the Stage level (with Log Level - Error. Debugging, INFO)
		Can override settings on a per API basis

User -- request----->API GW----request---->Backend
     <---response---   |   <---response---
                       |
                request response
                       |
	 	  CloiudWatch

	X-Ray 
		Enable tracing to get extra information about requests in API Gateway
		X-Ray API Gateway + AWS Lambda gives you the full picture
-----------------------------------------------------------------------------------------------------------
API GAteway - CLoudWatch Metrics
	Metrics are by stage, Possibility to enable detailed metrics
	CacheHitCount & CacheMissCount: efficiency of the cache
	Count: The total number API erequests in a given period
	IntegrationLatency: The time between when API Gateway relays a request to the backend and then it receives a response from the backend.
	LatencyL: The time between when API Gateway receives a request from a client and when it returns a response to the client. The latency
		  includes the integration latency and other API Cateway overhead
	4xxError (CLient Side) & 5xxError(server-side)
-----------------------------------------------------------------------------------------------------------
API Gateway Throttling 
	Account Limit
		API Gateway throttles requests at 10000 rps across all API
		Soft limit that can be increased upon request
	In case of throttling => 429 Too MAny Requests (retriable error)
	Can set Stage limit & Method limits to improve performance
	Or you can define Usage Plans to throttle per customer

	just like Lambda Concurrency, one API that is overloaded, if not limited, can use the other APIs to be throttled
------------------------------------------------------------------------------------------------------------
API GAteway - Errors
	4xx means Client errors
		400: Bad Request
		403: Access Denided, WAF filtered
		429: Quota exceeded, Throttle
	5xx means Server errors
		502: Bad Gateway Exception, usually for an incompatible output returned from a  Lambda proxy integration backend 
			and occasionally for out-of-order invocations due to heavy loads;
		503:mService Unavailable Exception
		504: Integration Failure-ex Endpoint Request Timed-out Exception
			API Gateway requests time out afre 29 seconds maximum
==============================================================================================================
AWS API Gateway - CORS
	CORS must be enabled when you receive API calls from another domain
	The OPTIONS pre-flight request must contain the following headers:
		Access-Control-Allow-Methods
		Access-Control-Allow-Headers
		Access-Control-Allow-Origin
	CORS can be enabled through the console
=============================================================================================================
API Gateway - Security
	IAM Permissions
		Create an IAM policy authorisation and attach to User/Role
		Authentication = IAM   |   Authorization = IAM Policy
		Good to provide access within AWS(EC2, Lambda, IAM users...)
		Leverages "Sig v4" capability where IAM credential are in headers


	Client ---REST API w/Sig v4---> API GW <-------> Backend
	                                  |
				   IAM Policy check 
					  |
					IAM
---------------------------------------------------------------------------------------------------------------
API GAteway - Resource Policies
	API Gateway - Resource Policies
		Resource policies (similar to Lambda Resource Policy)
		Allow for Cross Account Access (combined with IAM Security)
		Allow for a specific resource IP address
		Allow for a VPC Endpoint

{
    "Version": "2012-10-17",
    "Statement":[
	{
	    "Effect":"Allow",
	    "Principal":{
     	        "AWS":[
		    "arn:aws:iam::account-id-2:user/Alice",
		    "account-id-2"
		]
	    },
	   "Action":"execute-api:Invoke",

	   "Resource":[
		"arn:aws:execute-api:region:account-id-1:api-id/stage/GET/pets"
	   ]
	}
    ]
}
---------------------------------------------------------------------------------------------------------------------
API Gateway Security
	Cognito User Pools
		Cognito fully manages user lifecycle, token expires automatically
		API Gateway verifies identity automatically from AWS Cognito
		No Custom implementation required
		Authentication = Cognito User Pools | Authorization = API Gateway Methods
----------------------------------------------------------------------------------------------------------------------
APi Gateway - Security
Lambda Authorizer (formerly Custom Autghorizars)
	Token-based authorizer (bearer token) - ex JWT (JSON Web Token) or Oauth
	A request parameter-based Lambda authorizer (headers, query string, stage var)
	Lambda must return an IAM policy for the user, result policy is cached
	Authentication = External    |  Authorization = Lambda fucntion
	

	<--retrive Auth token--> 3-rd party auth system
	                                  ^
	                            Lambda Authorizer (if true => return to GW IAM Principal + IAM Role)
	                                  |

client  -----request with token--------->API GW <------------> Backend
      (token through parameter or header)   ^
		                            |
		                       Policy Cache
----------------------------------------------------------------------------------------------------------------------
API Gateway - Security - Summary
	IAM:
		Great for users/roles already within your AWS account, + resource policy for cross account
		Handle Authentication + authorization
	Custom authorizer: 
		Great for 3rd party tokens
		Very flexible in terms of what IAM policy is returned
		Handle Authentication verification + Authorization in the Lambda function
		Pay per Lambda invocation, results are cached 
	Cognito User Pool:
		You manage your own user pool (can be blocked by Facebook, Google login etc...)
		No need to write any custom code
		Must Implement authorization in the backend
==================================================================================================================
API Gateway - HTTP API vs REST API
	HTTP APIs
		low-latency, cost-effective AWS Lambda Proxy, HTTP proxy APIs and private integration (no Data mapping)
		support OIDC and OAuth 2.0 authorization, and build-in support for CORS 
		No usage plans and API keys
	Rest APIs
		All features (except Native OpenID Connect/OAuth 2.0)

Authorizers		HTTP API		REST API
AWS Lambda		+			+
IAM			+			+
Resource Policies	-			+
Amazon COgnito		+*			+
Native OpenID COnnect
/OAuth 2.0/JWT		+			-
=========================================================================================================================
API Gateway - WebSocket API - Overview
	What's WebSocket?
		Two-way interactive communication between a user's browser and a server
		Server can push information to the client 
		This enables statefull application use cases
	WebSocket APIs are often used in real-time applications such as chat applications, collaboration platforms, multiplayer games, 
		and financial trading platforms
	Works with AWS Services (Lambda, SynamoDB) or HTTP endpoints

	                                ------->Lambda function (onConnect) ------>  \
	                                                                               Amazon DynamoDB
client persist WS connection --> API GW ------->Lambda function (sendMessage) ---->  /
	
                                        ------->Lambda function (onDisconnect)

----------------------------------------------------------------------------------------------------------------------------
Connecting to the API
	WebSocket URL :
		wss://[some unique ID].execute-api.[region].amazonaws.com/[stage-name]

   client---connect---> API GW (WebSocketAPI) ---invoke--->Lambda function(onConnect)---connectionId---> DynamoDB
----------------------------------------------------------------------------------------------------------------------------
Client to Server Messaging 'ConnectionID is re-used'
	WebSocket URL
		wss://abcdef.execute-api.us-west-1.amazonaws.com/dev


      client (frames)---send message--->(frames) API GW 'WS API'---- invoke, connectionid-->Lambda(sendMessage)--connectionid-->DynamoDB
----------------------------------------------------------------------------------------------------------------------------
Server to Client Messaging
	

	client <----connection URL callback<----HTTP POST(IAM Sig 4)---Lambda(sendMessage)

	connection URL wss://abcdef.execute-api.us-west-1.amazonaws.com/dev/@connections/connectionid
----------------------------------------------------------------------------------------------------------------------------
Connection URL Operations
	Connection URL
		wss://abcdef.execute-api.us-west-1.amazonaws.com/dev/@connections/connectionid

Operation 	Action
POST            Sends a message from the Server to the connected WS Client
GET		Gets the latest connection status of the connected WS Client
DELETE		Disconnect the connected Client from the WS connection
----------------------------------------------------------------------------------------------------------------------------
API Gateway - WebSocket API - Routing
	incomming JSON messages are routed to kdifferent backend
	If no routes=> sent to $default
	You request a route selection expression to select the field on JSON to route from
	Sample expression : $request.body.action
	The result is evaluated against the route keys available in your API Gateway
	The route is then connected to the backend you've setup through API Gateway
============================================================================================================================
API Gateway - Architecture
	Create a single interface for all the microservices in your company
	Use API endpoints with various resources
	Apply a simple domain name and SSL certificate
	Can apply forwarding and transformation rules at the API Gateway level








	



	
	


















	


















