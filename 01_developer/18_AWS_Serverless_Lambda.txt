What's serverless?
	Serverless is a new paradigm in which the developers don't have to manage servers anymore...
	They just deploy code 
	They just deploy FUNCTIONS!
	Initially ... Serverless == FaaS (Function as a Service)
	Serverless was pioneered by AWS Lambda but now also includes anything that's managed: "databases, messaging, storage, etc"
	Serverless does not mean there are no servers ...it means you just don't manage / provision / see them
--------------------------------------------------------------------------------------------------------------------------
Serverless in AWS
	AWS Lambda
	DynamoDB
	AWS Cognito
	AWS API Gateway
	Amazon S3
	AWS SNS & SQS
	AWS Kinesis Data Firehose
	Aurora Serverless
	Step function
	Fargate

Example :          S3
	user ----> API Gateway  --->  Lambda ---> DynamoDB
	           Cognito
==========================================================================================================================
Why AWS Lambda 
	EC2 : 
		Virtual Servers in the Cloud
		Limited by RAM and CPU
		Continuously running
		Scaling means intervention to add / remove servers
	-------------------------------------------
	AWS Lambda :
		Virtual functiomns - no servers to manage!
		Limited by time - short executions (up to 15 min)
		Run on-demand
		Scaling is automated !
----------------------------------------------------------------------------------------------------------------------------
Benefits of AWS Lambda
	Easy Pricing:
		Pay per request and compute time
		Free tier of 1 000 000 AWS Lambda requests and 400 000 GBs compute time
	Integrated with  the whole AWS suite of services
	Integrated with many programming languages
	Easy monitoring through AWS CloudWatch
	Easy to get more resources per function (up to 10GB of RAM)
----------------------------------------------------------------------------------------------------------------------------
Lambda Language support
	Node.js
	Python
	Java (8 or 11)
	C#(.Net Core)
	Golang
	C#/Powershell
	Ruby
	Custom Runtime API (community supported, example Rust)

	Lambda Container Inage
		The container image must implement the Lambda Runtime API
		ECS/Fargate is preferred for running arbitrary Docker image

	Important : Docker is not for Lambda, it's for ECS/Fargate
--------------------------------------------------------------------------------------------------------------------------------
AWS Lambda Integrations Main ones
	API GAteway
	Kinesis
	DynamoDB
	S3
	CloudFront
	CloudWatch Events EventBridge
	CloudWatch Logs
	SNS
	SQS
	Cognito (user login)

Example:  we need create thumb image on a fly
	1. upload source image into S3
	2. S3 will trigger Lambda function
	3. Lambda will create thumbnail
	4. Lambda will push new Thumbnail to S3 for thumbs
	5. Lambda may push some data into DynamoDB  (image name, size, Creation Date ...)
---------------------------------------------------------------------------------------------------------------------------------
Example : Serverless CRON job
	CloudWatch Events EventBridge ---trigger every 1 hour-----> Lambda Func Perform a task
----------------------------------------------------------------------------------------------------------------------------------
AWS Lambda Pricing : example
	Overall pricing here : 
	https://aws.amazon.com/lambda/pricing/
	Pay per calls:
		First 1 000 000 requests thereafter (0.2$ per 1 000 000 requests)
	Pay per duration : (in increment of 1 ms)
		400 000 GB-seconds of compute time per month if FREE
		== 400 000 seconds if function is 1GB RAM
		==3 200 000 seconds if function is 128 MB RAM
		After that $1 for 600 000 GB-seconds
	It is usually very cheap to run AWS Lambda so it's very popular
======================================================================================================================================
Lambda - Synchronous Invocation
	Synchronous : CLI, SDK, API Gateway, Application Load Balancer
		Results is returned right away
		Error handling must happen client side (retries, exponential backoff, etc...)
	
Examples: 
	SDK/CLI -----invoke---------->Lambda (do something)
		<----Responce---------

	Client ---invoke--->API Gateway ---proxy---->Lambda (do something)
	       <---response--           <--Response---
-------------------------------------------------------------------------------------------------------------------------------------
Lambda - Synchronous Invocations - Services

	User Invoked: 
		Elastic Load Balancing (ALB)
		API Gateway
		CloudFront (Lambda@Edge)
		S3 Batch
	Service Invoked:
		Amazon Cognito
		AWS Step Functions
	Other Services:
		Amazon Lex
		Amazon Alexa
		Amazon Kinesis Data Firehose
=======================================================================================================================================
CLI commands: 
	aws lambda list-functions - list of my functions
	aws lambda list-functions - list of my functions --region eu-east-1
=======================================================================================================================================
Lambda integration with ALB
	To expose a Lambda function as an HTTP(S) endpoint...
	You can use ALB (or an API Gateway)
	The Lambda fucntion must be registered in a target group

	Example : 
		clint ---http(s)---> ALb ---invoke sync-->TargetGroup[Lambda]
----------------------------------------------------------------------------------------------------------------------------------------
ALB to Lambda : HTTP to JSON
	Request payload for Lambda Function
{
    "requestContext":{
         "elb":{
		"targetGroupArn":"arn:aws:elasticloadbalancing:us-east-1:<TG Id>"
	  }
    },
    "httpMethod":"GET",
    "path" : "/lambda",
    "queryStringParameters" {
	"query":"1234ABCD"    
    },
    "headers":{
        "connection":"keep-alive",
	"host":"lambda-alb-123456789.us-east-1.elb.amazonaws.com",
	"user-agent":"Mozilla/5.0 (WIndows NT 10.0; Win64; x64) AppleWe Safari/537.36",
	"x-amzn-trace-id":"Root=1-5c536348-3d683b8b04734faae651f476",
	"x-forwarded-for":"72.12.164.125",
	"x-forwarded-port":"80",
	"x-forwarded-proto":"http"
    },
    "body":"",
    "isBase64Encoded": false
}
-----------------------------------------------------------------------------------------------------------------------------------------
Lambda to ALB conversions : JSON to HTTP
	Response from the Lambda Function
	{
	    "statusCode":200,
	    "statusDescription":"200 OK",
	    "headers":{
	        "Context-Type": "text/html; charset=utf-8"
	    },
	    "body":"<h1>hello world</h1>",
	    "isBase64Encoded":false
	}
-----------------------------------------------------------------------------------------------------------------------------------------
ALB Multi-Header Values
	ALB can support multi header values (ALB Setting)
	When you enable multi-value headers, HTTP headers and query string parameters that are sent with multiple values
	    are shown as arrays wihtin the AWS Lambda event and response objects.

Example:
	client  sending request : 
		http://example.com/path?name=foo&name=bar
	to ALB, ALB converst params to JSON: 
		"queryStringParameters":{"name":["foo","bar"]}
	and send to Lambda

	




	






	





























	