What's serverless?
	Serverless is a new paradigm in which the developers don't have to manage servers anymore...
	They just deploy code 
	They just deploy FUNCTIONS!
	Initially ... Serverless == FaaS (Function as a Service)
	Serverless was pioneered by AWS Lambda but now also includes anything that's managed: "databases, messaging, storage, etc"
	Serverless does not mean there are no servers ...it means you just don't manage / provision / see them
--------------------------------------------------------------------------------------------------------------------------
Serverless in AWS
	AWS Lambda
	DynamoDB
	AWS Cognito
	AWS API Gateway
	Amazon S3
	AWS SNS & SQS
	AWS Kinesis Data Firehose
	Aurora Serverless
	Step function
	Fargate

Example :          S3
	user ----> API Gateway  --->  Lambda ---> DynamoDB
	           Cognito
==========================================================================================================================
Why AWS Lambda 
	EC2 : 
		Virtual Servers in the Cloud
		Limited by RAM and CPU
		Continuously running
		Scaling means intervention to add / remove servers
	-------------------------------------------
	AWS Lambda :
		Virtual functiomns - no servers to manage!
		Limited by time - short executions (up to 15 min)
		Run on-demand
		Scaling is automated !
----------------------------------------------------------------------------------------------------------------------------
Benefits of AWS Lambda
	Easy Pricing:
		Pay per request and compute time
		Free tier of 1 000 000 AWS Lambda requests and 400 000 GBs compute time
	Integrated with  the whole AWS suite of services
	Integrated with many programming languages
	Easy monitoring through AWS CloudWatch
	Easy to get more resources per function (up to 10GB of RAM)
----------------------------------------------------------------------------------------------------------------------------
Lambda Language support
	Node.js
	Python
	Java (8 or 11)
	C#(.Net Core)
	Golang
	C#/Powershell
	Ruby
	Custom Runtime API (community supported, example Rust)

	Lambda Container Inage
		The container image must implement the Lambda Runtime API
		ECS/Fargate is preferred for running arbitrary Docker image

	Important : Docker is not for Lambda, it's for ECS/Fargate
--------------------------------------------------------------------------------------------------------------------------------
AWS Lambda Integrations Main ones
	API GAteway
	Kinesis
	DynamoDB
	S3
	CloudFront
	CloudWatch Events EventBridge
	CloudWatch Logs
	SNS
	SQS
	Cognito (user login)

Example:  we need create thumb image on a fly
	1. upload source image into S3
	2. S3 will trigger Lambda function
	3. Lambda will create thumbnail
	4. Lambda will push new Thumbnail to S3 for thumbs
	5. Lambda may push some data into DynamoDB  (image name, size, Creation Date ...)
---------------------------------------------------------------------------------------------------------------------------------
Example : Serverless CRON job
	CloudWatch Events EventBridge ---trigger every 1 hour-----> Lambda Func Perform a task
----------------------------------------------------------------------------------------------------------------------------------
AWS Lambda Pricing : example
	Overall pricing here : 
	https://aws.amazon.com/lambda/pricing/
	Pay per calls:
		First 1 000 000 requests thereafter (0.2$ per 1 000 000 requests)
	Pay per duration : (in increment of 1 ms)
		400 000 GB-seconds of compute time per month if FREE
		== 400 000 seconds if function is 1GB RAM
		==3 200 000 seconds if function is 128 MB RAM
		After that $1 for 600 000 GB-seconds
	It is usually very cheap to run AWS Lambda so it's very popular
======================================================================================================================================
Lambda - Synchronous Invocation
	Synchronous : CLI, SDK, API Gateway, Application Load Balancer
		Results is returned right away
		Error handling must happen client side (retries, exponential backoff, etc...)
	
Examples: 
	SDK/CLI -----invoke---------->Lambda (do something)
		<----Responce---------

	Client ---invoke--->API Gateway ---proxy---->Lambda (do something)
	       <---response--           <--Response---
-------------------------------------------------------------------------------------------------------------------------------------
Lambda - Synchronous Invocations - Services

	User Invoked: 
		Elastic Load Balancing (ALB)
		API Gateway
		CloudFront (Lambda@Edge)
		S3 Batch
	Service Invoked:
		Amazon Cognito
		AWS Step Functions
	Other Services:
		Amazon Lex
		Amazon Alexa
		Amazon Kinesis Data Firehose
=======================================================================================================================================
CLI commands: 
	aws lambda list-functions - list of my functions
	aws lambda list-functions - list of my functions --region eu-east-1
=======================================================================================================================================
Lambda integration with ALB
	To expose a Lambda function as an HTTP(S) endpoint...
	You can use ALB (or an API Gateway)
	The Lambda fucntion must be registered in a target group

	Example : 
		clint ---http(s)---> ALb ---invoke sync-->TargetGroup[Lambda]
----------------------------------------------------------------------------------------------------------------------------------------
ALB to Lambda : HTTP to JSON
	Request payload for Lambda Function
{
    "requestContext":{
         "elb":{
		"targetGroupArn":"arn:aws:elasticloadbalancing:us-east-1:<TG Id>"
	  }
    },
    "httpMethod":"GET",
    "path" : "/lambda",
    "queryStringParameters" {
	"query":"1234ABCD"    
    },
    "headers":{
        "connection":"keep-alive",
	"host":"lambda-alb-123456789.us-east-1.elb.amazonaws.com",
	"user-agent":"Mozilla/5.0 (WIndows NT 10.0; Win64; x64) AppleWe Safari/537.36",
	"x-amzn-trace-id":"Root=1-5c536348-3d683b8b04734faae651f476",
	"x-forwarded-for":"72.12.164.125",
	"x-forwarded-port":"80",
	"x-forwarded-proto":"http"
    },
    "body":"",
    "isBase64Encoded": false
}
-----------------------------------------------------------------------------------------------------------------------------------------
Lambda to ALB conversions : JSON to HTTP
	Response from the Lambda Function
	{
	    "statusCode":200,
	    "statusDescription":"200 OK",
	    "headers":{
	        "Context-Type": "text/html; charset=utf-8"
	    },
	    "body":"<h1>hello world</h1>",
	    "isBase64Encoded":false
	}
-----------------------------------------------------------------------------------------------------------------------------------------
ALB Multi-Header Values
	ALB can support multi header values (ALB Setting)
	When you enable multi-value headers, HTTP headers and query string parameters that are sent with multiple values
	    are shown as arrays wihtin the AWS Lambda event and response objects.

Example:
	client  sending request : 
		http://example.com/path?name=foo&name=bar
	to ALB, ALB converst params to JSON: 
		"queryStringParameters":{"name":["foo","bar"]}
	and send to Lambda
========================================================================================================================================
Example Lambda  Http responce

import json

def lambda_handler(event, context):
    # TODO implement
    print(event)
    return {

    "statusCode": 200,
    "statusDescription": "200 OK",
    "isBase64Encoded": False,
    "headers": {
        "Content-Type": "text/html"
    },
    "body": "<h1>Hello from Lambda!</h1>"

    }
-----------------------------------------------------------------------------------------------------------------------------------------
Using AWS Lambda with an Application Load Balancer: 
	https://docs.aws.amazon.com/lambda/latest/dg/services-alb.html
=========================================================================================================================================
Lambda - Asynchronous Invocation
	S3, SNS, CloudWatch Events ...
	The events are placed in an Event Queue
	Lambda attempts to retry on errors
		3 tries total 
		1 min wait after first, then 2 minutes wait
	Make sure the processing is idempotent (in case of retries)
	If the function is retried, you will see duplicate logs entries in CloudWathc Logs
	Can define a DLQ (dead-letter queue) - SNS or SQS - for failed processing (need correct IAM permissions)
	Asynchronous invocations allow you to speed up processing if you don't need to wait for the result (ex: you need 1000 files processed)
-------------------------------------------------------------------------------------------------------------------------------------------
Lambda - Asynchronous Invocations - Services
	Amazon Simple Storage Service (S3)
	Amazon Simple Notification Service(SNS)
	Amazon CloudWatch Events/EventBridge
	AWS CodeCommit (codeCommit Trigger: new branch, new tag, new push)
	AWS CodePipeline(invoke a lambda function during the pipeline, Lambda must callback)
	------other---------
	Amazon CloudWatch Logs(log processing)
	Amazon Simple Email Service
	AWS CloudFormation
	AWS Config
	AWS IOT
	AWS IoT Events
============================================================================================================================================
CloudWatch Events/EventBridge
	CRON or Rate EventBridge Rule --- trigger every 1 hour ---> Lambda Function perform a task
	
	CodePipeline EventBridge Rule --- Trigger on State Changes --> AWS Lambda Function Perform a task
=============================================================================================================================================
S3 Events Notifications
	S3:ObjectCreated,S3:ObjectRemoved,S3:ObjectRestore,S3:Replication
	Object Name filtering possible (*.jpg)
	Use case : generate Thumbnails of images uploaded to S3
	S3 Event notifications typically deliver events in seconds but can take a minute or longer
	If two writes are made to a single non-versioned object at the same time,  it is possible that only a single event notofocation will be sent
	If you want to ensure that an event notification is sent for every successfull write, you can enable versioning on your bucket

Example 1:
	                       --->SQS
	                --->SNS--->SQS

	  events---> S3 ---> SQS----> Lambda
	                --async-->Lambda---dlq--->SQS

Example 2                                                    ------>Table in RDS
	S3---new-file-event--->Lambda(update metadata event)
	                                                     ------>DynamoDB Table
=====================================================================================================================================================
Lambda - Event Source Mapping
	Kinesis Data Syteams
	SQS & SQS FIFO queues
	DynamoDB Streams
	
	Common denominator: records need to be polled from the source
	Your Lambda function is invoked synchronosly	
----------------------------------------------------------------------------------------------------------------------------------------------------
Streams & Lambda (Kinesis & DynamoDB)
	An Event source mapping creates an iterator for each shard
	Start with new items, from the begining or from timestamp
	Processed items aren't removed from the stream (other consumers can read them)
	If low traffic - use batch window to accumulate records before processing
	You can process multiple batches in paralel
		up to 10 batches per shard
		in-order processing is still guaranteed for each partition key
----------------------------------------------------------------------------------------------------------------------------------------------------
Streams & Lambda - Error Handling
	By default. if your function returns an error, the entire batch is processed until the function succeeds, or the items in the batch expire.
	To ensure in-order processing, processing for the affected shard is paused untill the error is resolved
	You can configure the event source mapping to :
		discard old events
		restrict the number of retries
		split the batch on error (to work around Lambda timeout issues)
	Discarded events can go to a Destination
-----------------------------------------------------------------------------------------------------------------------------------------------------
Lambda - Event Source Mapping SQS & SQS FIFO
	Event Source Mapping will poll SQS (Long Polling)
	Specify batch size (1-10 meddages)
	Recommended: Set the queue visibility timeout to 6x the timeout of your Lambda function
	To use a DLQ
		set-up on SQS queue, not Lambda (DLQ for Lambda is only for async invocation)
		Or use a lambda destination for failures

Example :
	SQS <---POLL------------  Lambda Event Source Mapping  ---INVOKE WITH EVENT BATCH----->Lambda function
	    ---return batch----->
---------------------------------------------------------------------------------------------------------------------------------------------------
Queues  & Lambda
	Lambda also supports in-order procesing for FIFO queues, scaling up to the number of active message groups.
	For standard queues, items aren't necessarily processed in prder
	Lambda scales up to process a standard queue as quickly as possible.

	When an error occurs, batches are returned to the queue as individual items and might be processed in a different grouping than the original batch
	Occasionally, the event source mapping might receive the same item from the queue twice, even if no function error occured.
	Lambda deletes items from the queue after they're processed successfully
	You can configure the source queue to send items to a dead-letter queue ifthey can't be processed
----------------------------------------------------------------------------------------------------------------------------------------------------
Lambda Event Mapper Scaling
	Kinesis Data Streams & DynamoDB Streams
		One Lambda invocation per stream shard
		if you use parallelization, up to 10 batches processed per shard simultaneousle
	SQS Standard:
		Lambda adds 60 more instances per minute to scale up
		Up to 1000 batches of messages processed simultaneously
	SQS FIFO:
		Messages with same GroupID will be processed in order 
		The Lambda function scales to the number of active messsage groups
======================================================================================================================================================
Lambda Event & Context Objects
	When EventBridge invokes an evebt - Lambda Function gets Event Object (who invoked)
	but Context Object - contains Lambdas info (aws_request_id, func_name, arn,version, MB, log_group_name ...)

	Event Object 
		Json-formatted document contains data for the function to process
		Contains info from the involing service (e.g. EventBridge, custom, ...)
		Lambda runtime converts the event to an object (e.g. dict type in Python)
		Example: input arguments, invoking service arguments, ...

	Context Object
		Provides nethods and properties that provide information about the invocation, function, and runtime environment
		Passes to your function by Lambda at runtime
		Example : aws_request_id, function_name, memory_limit_in_mb, ...
--------------------------------------------------------------------------------------------------------------------------------------------------
Access Event & Context Object using Pythont
	def lambda_handler(event, context):
		print("Event Source:",event.source)
		print("Event Region",event.region)

		print("Lambda Request ID: ",context.aws_request_id)
		print("Lambda function NAME:",context.function_name)
		print("Lambda function ARN:",context.invoked_function_arn)
		print("Lambda function memory limits in MB:",context.memory_limit_in_mb)
		print("CloudWatch logs stream name:",context.log_stream_name)
		print("CloudWatch log group name:",context.log_group_name)
===================================================================================================================================================
Lambda - Destinations
	Nov 2019: Can configure to send result to a destination
	Asynchronous invocations - can define destinations for successful and failed event:
		SQS
		SNS
		Lambda
		EventBridgeBus
 	Note: AWS recomends you use destinations instead of DLQ now (but both can be used at the same time)
 	Event Source Mapping: for discarded event batches
		Amazon SQS
		Amazon SNS
	Note : you can send events to a DLQ dirrectly from SQS
===================================================================================================================================================
Lambda Execution Role (IAM Role for call by Lambda)
	Grants the Lambda function permissions to AWS services / resources
	Sample managed policies for Lambda
		AWSLambdaBasicExecutionRole - Upload logs to CloudWatch.
		AWSLambdaKinesis ExecutionRole - Read From Kinesis
		AWSLambdaDynamoDBExecutionRole - Read from DynamoDB Streams
		AWSLambdaSQSQueueExecutionRole - Read from SQS
		AWSLambdaVPCAccessExecutionRole - Deploy Lambda function in VPC
		AWSXRayDaemonWriteAccess - Upload trace data to X-Ray.

	When you use an event source mappig  to invoke your function, Lambda uses the execution role to read event data
	Best practice: create one Lambda Execution Role per function
--------------------------------------------------------------------------------------------------------------------------------------------------
Lambda Resource Based Policies
	Use resource-based policies to give other accounts and AWS services permission to use your Lambda resources
	Similar to S3 bucket policies for S3 bucket
	An IAM principal can access Lambda:
		if the IAM policy attached to the principal authorizes it (e.g. user access)
		OR if the resource-based policy authorizes (e.g. service access)
	
	When an AWS service like S3 calls your Lambda function, the resource-based policy gives it access.
=================================================================================================================================================
Lambda Environment VAriables
	Environment variables = key / value pair in "String" form
	Adjust the function behavior without updating code
	The environment variables are available to your code
	Lambda Service adds its own system environment variables as well
	
	Helpful to store secrets (encrypted by KMS)
	Secrets can be encrypted by the Lambda service key, or your own CMK (Customer Master Key) 
=================================================================================================================================================
Lambda Logging & Monitoring
	CloudWatch Logs:
		AWQS LAmbda execution logs are stored in AWS CloudWatch Logs
		Make sure your AWS Lambda function has an execution role with an IAM policy that authorizes writes to CloudWaych Logs
	CloudWatch Metrics :
		AWS Lambda metrics are displayed in AWS CloudWatch metrics
		Invocations, Durations, Concurrent Executions
		Error count, Success Rates, Throttles
		Async Delivery Failures
		Iterator Age (Kinesis & DynamoDB Streams) 
---------------------------------------------------------------------------------------------------------------------------------------------------
Lambda Tracing with X-Ray
	Enable in Lambda configuration (Active Tracing)
	Runs the X-Ray daemon for you
	Use AWS X-Ray SDK in Code
	Ensure Lambda Function has a correct IAM Execution Role
		The managed policy is called AWSXRayDaemonWriteAccess
	Environment variables to communicate with X-Ray
		_X_AMZN_TRACE_ID : contains the tracing header
		AWS_XRAY_CONTEXT_MISSING: by deffault, LOG_ERROR
		AWS_XRAY_DAEMON_ADDRESS:the X-Ray Daemon IP_ADDRESS:PORT
===================================================================================================================================================
Customization At The Edge
	Many modern applications execute some form of the logic at the edge
	Edge Function:
		A code that you write and attach to CloudFront distributions
		Runs close to your users to minimize latency
	CloudFront provides two types: CloudFront Function & Lambda@Edge
	You don't have to manage any servers, deployed globally

	Use case : customize the CDN content
	Pay only for what you use
	Fully serverless
---------------------------------------------------------------------------------------------------------------------------------------------------
CloudFront Functions & Lambda@Edge Use cases
	Website Security and Privacy
	Synamic Web Application at the Edge
	Search Engune Optimization (SEO)
	Intelligently Route Across Origins and Data Centers
	Bot Mitigation at the Edge
	Real-time Image Transformation
	A/B Testing
	User Authentication and Auhorization
	User Prioeritization
	User Tracking and Analytics
-----------------------------------------------------------------------------------------------------------------------------------------------------
CloudFront Functions 
	Lightweight functions writen in JavaScript
	For high-scale, latency-sensitive CDN customizations
	Sub-ms startup times, millions of requests/second
	Used to change Viewer requests and responces:
		Viewer Request: after CloudFront receives a request from a viewer
		Viewer Response : before CloudFront forwards the response to the viewer
	Native feature of CloudFront (manage code entirely within CloudFront)
------------------------------------------------------------------------------------------------------------------------------------------------------
Lambda@Edge
	Lambda functions wrutten in Node.js or Python
	Scales to 1000s of requests/second
	Used to change CloudFront requests and responses:
		Viewer Request - after CloudFront receives a request from a viewer
		Origin Request - before CloudFront forwards the request to the origin
		Origin Response - after CloudFront receives the response from the origin
		Viewer Response - before CloudFront forwards the response to the viewer
	Author your functions in one AWS Regions (us-easr-1), then CloudFront replicates to its locations
------------------------------------------------------------------------------------------------------------------------------------------------------
CloudFront Function vs Lambda@Edge
				CloudFront Function				Lambda@Edge
Runtime support				JS	  			     Node.js, Python						
count of requests 		millions/sec					1000s/sec
CloudFront triggers		Viewer request/response				Viewer request/response
										Origin request/response
Max Execution time		<1ms						5-10 seconds
Max Memory			2 MB						128 MB up to 10 GB
Total Package Size		10Kb						1Mb - 50Mb
Network/File System Access	No						Yes
Access to the request body	No						Yes
Pricing				Free tier, 1/6 price of @Edge			No Free tier, charged per request & duration
-------------------------------------------------------------------------------------------------------------------------------------------------------
CloudFront FUnction vs. Lambda@Edge - Use Cases
		CloudFront Function							Lambda@Edge
Cache key normalization                                                               Longer execution Time (several ms)
	Transform requests atributes(headers, cookies, query strings URL)             Adjustable CPU or memory
	  to create an optimal Cache Key                                              Your code depends on a 3rd libraries  
Header manipulation                                                                    (e.g. AWS SDK to access other AWS services)
	insert/modify/delete HTTP headers in the request or response                  Network access to use external services for processing
Url rewrites or redirects                                                             File system access or access to the body of HTTP requests
Request authentication & authorization
	Create and validate user-generated token (e.g. JWT) to allow /deny requests
======================================================================================================================================================
Lambda by default
	By default, your Lambda function is launched outside your own VPC (in an AWS owned VPC)
	Therefore it cannot access resources in your VPC (RDS, ElastiCache, internal ELB...)
-------------------------------------------------------------------------------------------------------------------------------------------------------
Lambda in VPC
	You must define the VPC ID, the Subnets and the Security Groups
	Lambda will create an ENI (Elastic Network Interface) in your subnets
	AWSLambdaVPCAccessExecutionRole
--------------------------------------------------------------------------------------------------------------------------------------------------------
Lambda in VPC - Internet Access
	A Lambda function in your VPC does not have Internet access
	Deploying a lambda function in a public subnet does not give it internet access or a public IP
	Deploying a Lambda function in a private subnet gives it internet access if you have a "NAT Gateway/Instance"
	You can use "VPC endpoints" to privately access AWS services without a NAT
========================================================================================================================================================
Lambda function Configuration
	RAM : 
		From 128Mb to 10Gb in 1MBincrements
		The more RAM you add, the more vCPU credits you get
		AT 1792Mb, a function has the equivalent of one full vCPU
		After 1792 Mb, you get more than one CPU, and need to use multi-threading in your code to benefit from it
	If your application is CPU-bound(computation heavy), increase RAM

	Timeout: default 3 seconds, maximum is 900 seconds (15 minutes)
--------------------------------------------------------------------------------------------------------------------------------------------------------
Lambda Execution Context
	The execution context is a temporary runtime environment that initializes any external dependencies of your lambda code
	Great for database connections, HTTP client, SDK clients...
	The execution context is maintained for some time in anticipation of another Lambda function invocation
	The next function invocation can 're-use' the context to execution time and save time in initializing connections objects
	The execution context includes the /tmp directory
-----------------------------------------------------------------------------------------------------------------------------------------------------
Initializing outside the handler
	BAD - The DB connection is established At every function invocation
	GOOD - The DB connection is established once And re-used across invocations
---------------------------------------------------------------------------------------------------------------------------------------------------
Lambda Functions /tmp space
	if your Lambda function needs to download a big file to work...
	If your Lambda function needs disk space to perform operations...
	You can use the /tmp directory
	Max size is 10Gb
	The directory content remains when the execution context is frozen, providing transient cache that can be used for multiple invocations
		(helpfull to checkpoint your work)
	For permanent persistance of object (non temporary), use S3
	To encrypt content on /tmp, you must generate KMS Data Keys
====================================================================================================================================================
Example: init DB outside of handler
import json
import os
import time

def connect_to_db();
	time.sleep(3)
connect_to_db();

def lambda_handler(event, context):
	return "executing Lambda"
=====================================================================================================================================================
Lambda Layers
	Custom Runtimes
		Ex: C++
		Ex: Rust
	Externalize Dependencies to re-use them:
	
Example : 
	Allication Package (30Mb)
		lambda_function.py + lib1 + lib2
	
    may be devided :
	Application Package(20kKB)			Another Application Package
	                ^                                        ^
			|------	Lambda Layer 1 (10MB) -----------| 
			|------	Lambda Layer 2 (20MB) -----------|
=====================================================================================================================================================
Google : aws blog lambda layer scipy
https://aws.amazon.com/blogs/aws/new-for-aws-lambda-use-any-programming-language-and-share-common-components/
======================================================================================================================================================
Lambda File Sysctem mounting
	Lambda functions can access EFS file systemsif they are are running in a VPC
	Configure Lambda to mount EFS file systems to local directory during initialization
	Must leverage EFS Access Points
	Limitations: watch out for the EFS connection limits (one function instance = one connection) and connection brust limits
-------------------------------------------------------------------------------------------------------------------------------------------------------
			Ephemeral Storage /tmp		Lambda Layers			Amazon S3		Amazon EFS
Max Size		10240 MB		5 Layers per func up to 250MB	     	Elastic  		Elastic
Persistence		Ephemeral			Durable				Durable			Durable
Content			Dynamic				Static				Dynamic			Dynamic
Storage Type 		File Ststem			Archive				Object			File System
Operations supported	any File System Operation	Immutable		Atomic with versioning		any FS Operation
Pricing			included in Lambda		included in Lambda	Storage+Requests+Data Transfer	Storage+Data Transfer+Throughput
Sharing/Permissions	Function Only			IAM				IAM			IAM+NFS

Relative Data Access 	Fastest				Fastest				Fast			Very Fast
   speed from Lambda

Shared Across All	No 				Yes				Yes			Yes 
    Invocations
=======================================================================================================================================================
Lambda Concurrency and Throttling 
	Concurrency limit : up to 1000 concurrent executions
	Can set a "reserved concurrency" at the function level (= limit)
	Each invocation over the concurrency limit will trigger a "Throttle"
	Throttle behavior:
		if synchronous invocation => return ThrottleError - 429
		If asynchronos invocation => retry automatically and then go to DLQ
	If you- need a higher limit, open a support ticket
	Limith 1000 - it depends for ALL functions (you can run 1000 instances for account)
-------------------------------------------------------------------------------------------------------------------------------------------------------
Concurrency and Asynchronous Invocation
	If the function doesn't have enough concurrency available to process all events, additional requests are throttled
	For throttling errors (429) and system Error (5xx) Lambda returns the event to the queue and attempts to run the function again for up to 6 hours
	The retry interval increases exponentially from 1 second after the first attempt to a maximum of 5 minutes
-------------------------------------------------------------------------------------------------------------------------------------------------------
Cold Start & Provisioned Concurrency
	Cold Start:
		New instance => code is loaded and code outside the handler run(init)
		if the init is large (code, dependencies, SDK...) this process can take some time.
		First request serverd by new instances has higher latency than rest
	Provisioned Concurrency:
		Concurrency is allocated before the function is invoked (in advance)
		So the cold start never happens and all invocations have low latency
		Application Auto Scaling can manage concurrency (schedule or target utilization)
	Note: 
		Note: cold start in VPC have been dramatically reduced in Oct & Nov 2019
======================================================================================================================================================
Lambda function Dependencies
	If your Lambda function depends on external libraries: for example AWS X-Ray SDK, Database Clients, etc...
	You need to install the packages alongside your code and zip it together
		For Node.js use npm & "node_modules" directory
		For Python, use pip --target options
		For Java, include the relevant .jar files
	Upload the zip straight to Lambda if less than 50MB, else to S3 first
	Native libraries work: they need to be, compiled  on Amazon Linux
	AWS SDK comes by default with every Lambda function
======================================================================================================================================================
Create function with command line
	aws lambda create-function --zip-file fileb://function.zip --function-name lambda-xray-with-dependencies --runtime nodejs14.x --handler index.handler --role arn:aws:iam::630844037288:role/DemoLambdaWithDepencencies 
======================================================================================================================================================
Lambda and CloudFormation - inline   (right in template)
	Inline functions are very simple
	Use the Code.ZipFile propertly
	You cannot include function dependencies with inline function
Example : 

AWSTemplateFormatVersion:"2010-09-09"
Resources:
    primer:
	Properties:
	    Code:
		ZipFile: |
		    import os
		    DB_URL = os.getenv("DB_URL")
		    .............
--------------------------------------------------------------------------------------------------------------------------------------------------------
Lambda and CloudFormation - through S3
	You must store the Lambda zip in S3
	You must refer the S3 zip lpcation in the CloudFormation code
		S3Bucket
		S3Key: full path to zip
		S3ObjectVersion : if versioned bucket
	If you update the code in S3, but don't update S3Bucket, S3Key, or S3ObjectVersion, CloudFormation won't update your function 


Example:

AWSTemplateFormatVersion:"2010-09-09"                                                                                                 
Resources:                                                                                                                                                
   primer:            
      Properties:                                                                                                                                   
         Code:  
	     S3Bucket: my-bucket
	     S3Key: function.zip
	     S3ObjectVersion: String
	 Runtime: nodejs12.x                                                                                                                                     
                                                                                        
        .............               		 
--------------------------------------------------------------------------------------------------------------------------------------------------------		
Lambda and CloudFormation - through S3 Multiple accounts

	Account 1 
		S3 Bucket with Lambda Code +Bucket policy  (Allow Principal [Account ID])
	Account 2..n
		CloudFormation with execution Role( allow get & list to S3 Bucket) ---deploy---> Lambda function
========================================================================================================================================================
Lambda Container Images
	Deploy Lambda function as container images of up to 10GB from ECR
	Pack complex dependencies, large dependencies in a container
	Base images are available for Python Node.js, Java, .Net, Go, Ruby
	Can create your own image as long as it implements the Lambda Runtime API
	Test the containers locally using the Lambda Runtime Interface Emulator
	Unified workflow to build apps

Example: 
	Docker[App Code + Dependencies + implement Lambda Runtime API] ---push---> Amazon ECR-----deploy----> Lambda
--------------------------------------------------------------------------------------------------------------------------------------------------------
Lambda Container Images
	Example: build from the base images provided by AWS

		#Use an image that implements the Lambda Runtime API
		FROM amazon/aws-lambda-nodejs:12

		#Copy your application code and files
		COPY app.js package*.json  ./

		#Install the dependencies in the container
		RUN npm install

		#Function to run when the Lambda function is invoked
		CMD ["app.lambdaHandler"]
-------------------------------------------------------------------------------------------------------------------------------------------------------
Lambda Container Images - Best Practices
	Strategies for optimizing container images:
		Use AWS-provided Base Images
			Stable, Build on Amazon Linux2, cached by Lambda services
		Use Multi-Stage Builds
			Build your code in larger preliminary images, copy only the artifacts you need in your final container image, 
			   discard the preliminare steps
		Build from Stable to Frequently Changing 
			Make your most frequently occuring changes as late in your Dockerfile as possible
		Use a single Repository for Functions with Large Layers
			ECR compares each layer of a container image when it is pushed to avoid uploading and storing duplicates
	Use them to upload large Lambda Functions (up to 10 GB)
=====================================================================================================================================================
AWS Lambda Versions
	When you work on a Lambda function, we work on $LATEST 
	When we're ready to publish a Lambda function, we create a version
	Versions are immutable
	Version have increasing version numbers
	Versions get their own ARN
	Version = code +configuration (nothing can be changed - immutable)
	Each version of the lambda function can be accessed
----------------------------------------------------------------------------------------------------------------------------------------------------
AWS Lambda Aliases
	Aliases are "pointers"  to Lambda function versions
	We can define a "dev", "test", "prod" aliases and have them point at different Lambda versions
	Aliases are mutable
	Aliases enable Canary deployment by assigning weights to lambda function
	Aliases enable stable configuration of our event triggers/destinations
	Aliases have their own ARNs
	Aliases camnnot reference aliases
====================================================================================================================================================
Lambda & CodeDeploy
	CodeDeploy can help you automate traffic shift for Lambda aliases
	Feature is integrated within the SAM franework
	Linear: grow traffic every N minutes untill 100%
		Linear10PersentEvery3Minutes
		Linear10PersentEvery10Minutes
	Canary: try X persent then 100%
		Canary10Persent5Minutes
		Canary10Persent30Minutes
	AllInOnce: immediate
	Can create Pre & Post Traffic hooks to check the health of the Lambda function
---------------------------------------------------------------------------------------------------------------------------------------------------
Lambda & CodeDeploy - AppSpec.yml
	Name(required) - the name of the lambda function to deploy
	ALias (required) - the name of the alias to the Lambda function
	CurrentVersion (required) - the version of the Lambda function traffic currently points to 
	TargetVersion (required) - the version of the Lambda function is shifted to 

Code xample: 
	version : 0.0
	Resources:
	    - myLambdaFunction
		Type: AWS::LAmbda::Function
		Properties:
		    Name: myLambdaFunction
		    Alias: myLambdaFunction
		    CurrentVersion: 1
		    TargetVersion: 2
=====================================================================================================================================================
Lambda - Function URL
	Dedicated HTTP(S) endpoints for your Lambda function
	A unique URL endpoint is generated for you (never changes)
		https://<url-id>.lambda-url.<region>.on.aws (dual-stack IPv$ & IPv6)
	Invoke via a web browser, curl, Postman, or any HTTP client
	Access your function URL through the public internet only
		Doesn't support PrivateLink (Lambda functions do support)
	Supports Resource-based Policies & CORS configurations
	Can be applied to any function alias or to $LATEST (can't be applied to other function versions)
	Create and configure using AWS Console or AWS API
	Throttle your function by using Reserver Concurrency
-----------------------------------------------------------------------------------------------------------------------------------------------------
Lambda - Function URL Security
	Resource-based Policy
		Authorize other accounts / specific CIDR/ IAM principals
	Cross-Origin Resource Sharing (CORS)
		if you call your Lambda function URL from a different domain
----------------------------------------------------------------------------------------------------------------------------------------------------
Lambda - Function URL Security
	AuthType NONE - allow public and unauthenticated access
		Resource-based Policy is always in effect (Must grant public access)

"Condition":{
    "StringEquals":{
	"lambda::FunctionUrlAuthType":"NONE"
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------
Lambda function URL Security
	AuthType AWS_IAM - IAM is used to authenticate and authorize requests
		Both Principal's identity-based Poliucy & Resource-Based Policy are evaluated 
		Principal must have lambda:InvokeFunctionUrl permissions
		Same account - Identity-based Policy OR Resource-based Policy as ALLOW 

Example Cross account:
	Account A (123456789012)
{
"Version":"2012-10-17",
"Statement":[
{
"Effect":"Allow",
"Principal": {
"AWS":arn:aws:iam::<account B id>:role/my-role
},
"Action":"lambda:InvokeFunctionUrl",
"Resource": "arn:aws:lambda:us-west-1:<account A id>:function:my-function",
"Conditions":{
"StringEquals":{
"lambda:FunctionUrlAuthType": AWS_IAM
}
}
}
]
} 
---------------
Account B (444455556666)	
"Version":"2012-12-12"
"Statement":[
{
"Effect":"Allow",
"Action":"lambda:InvokeFunctionUrl",
"Resource":"arn:aws:lambda:us-east-1:<account A id>:function:my-function"
}
] 
}
==========================================================================================================================================================
Lambda and CodeGuru Profiling
	Gain insights into runtime performance of your Lambda function using CodeGuru Profiler
	CodeGuru creates a Profiler Group for your Lambda function
	Supported for Java and Python runtimes
	Activate from AWS Lambda Console
	When activated, Lambda adds: 
		CodeGuru Profiler layer to your function
		Environment variables to your function
		AmazonCodeGuruAgentAccess policy to your function
==========================================================================================================================================================
AWS Lambda Limits to Know - per region
	Execution:
		Memory allocated : 128MB - 10GB (1 MB increments)
		Maximum execution time: 900 seconds (15 minutes)
		Environment variables (4KB)
		Disk capacity in the "function container" (in /tmp):512 MB to 10GB
		Concurency executions : 1000(can be increased)
	Deployment:
		Lambda function deployment size (compressed .zip): 50MB
		Size of uncompressed deployment (code + dependencies): 250MB
		Can use the /tmp directory to load other files at startup
		Size of environment variables: 4KB
==========================================================================================================================================================
Lambda Best Practices
	Perform heavy-duty work outside of your function handler
		Connect to DB outside of your function handler
		initialize the AWS SDK outside of your function handler
		Pull in dependencies or datasets outside of your function handler
	Use environment variables for :
		Database Connection Strings, S3 buckets, etc... don't put these values in your code
		Passwords, sensetive values... they can be encrypted using KMS
	Minimize your deployment package size to its runtime necessities
		Break down the function if need be
		Remember the AWS LAmbda limits
		Use Layers where necessary
	Avoid using recursive code, never have a Lambda function call itself
 




	






	
	

	
		



	

		

	






	





























	