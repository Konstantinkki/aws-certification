AWS Cloud Development Kit (CDK)
	Define your cloud infrastructure  using a familar language:
		JS/TS, Py, Java, .NET
	Contains High level components called constructs
	The code is "compilled" into a CloudFormation template (JSON/YAML)
	You can therefore deploy infrastructure and application runtime code together
		Great for Lambda functions
		Great for Docker containers in ECS/EKS

file ---> CDK CLI ---> CF Template --> CF
---------------------------------------------------------------------------
CDK vs SAM 
	SAM 
		Serverless focused
		Write your tamplate declaratively in JSON or YAML
		Great for quickly getting started with Lambda
		Leverages CloudFormation
	CDK
		All AWS services
		Write infra in a programming languages JS/TS, Py, Java, .NET
		Leverages CloudFormation
-------------------------------------------------------------------------------
CDK + SAM 
	You can use SAM CLI to locally testyour CDK apps
	You must first run 'cdk synth'

CDK app  ----> cdk synth---> CF Template <-----SAM CLI
===================================================================================
CDK Construct
	CDK Construct is a component that encapsulates everything CDK needs to create the final CloudFormation stack
	Can represent a single AWS resource (e.g. S3 bucket) or multiple related resources (e.g. worker queue with compute)
	AWS Construct Library
		A collection of Constructs included in AWS CDK which contains Constructs for every AWS resource
		Contains 3 different levels of Constructs available (L1, L2, L3)
	Construct Hub - contains additional Constructs from AWS 3rd parties, and open-source CDK community
-----------------------------------------------------------------------------------
CDK Constructs - Layer 1 Constructs (L1)
	Can be called CFN Resources which represents all resources directly available in CloudFormation
	Constructs are periodically generated from CloudFormation Resource Specification
	Construct names start with Cfn(e.g. CfnBucket)
	You must explicity configure all resource properties

	const bucket = new s3.CfnBucket(this, "MyBucket", {
	    bucketName: "MyBucket"
	});
-----------------------------------------------------------------------------------
CDK Constructs Layer 2 Constructs (L2)
	Represents AWS resources but with a higher level (intent-based API)
	Similar functionallity as L1 but with convenient defaul,ts and boilerplate
		You don't need to know all the details about the resource properties
	Provide methods that make it simpler to work with the resource (e.g. bucket.addLifeCycleRule())

	const s3 = require ('aws-cdk-lib/aws-s3');
	const bucket = new s3.Bucket(this, 'MyBucket', {
		versioned: true,
		encryption: s3.BucketEncryption.KMS
	});

	// Return the HTTPS URL of an S3 Object
	const objectUrl = bucket.urlForObject('MyBucket/MyObject');
---------------------------------------------------------------------------------
CDK Construct - Layer 3 Constructs (L3)
	Can be called 'Patterns' which represents multiple related resources
	Helps you complete common tasks in AWS
	Examples: 
		aws-apigateway.LambdaRestApi represents an API Gateway backed by a Lambda function
		aws-ecs-patterns.ApplicationLoadBalancerFargateService which represents an architecture that includes a Fargate cluster with ALB

		const  api = new apigateway.LambdaRestApi(this, 'myapi', {
		    handler: backend,
		    proxy: false
		});
		const items = api.root.addResource('items');
		items.addMethod('GET');
		items.addMethod('POST');
		
		const item = items.addResource('{item}');
		item.addMethod('GET');
		
		item.addMethod('DELETE', new apigateway.HttpIntegration('http://amazon.com'))
==============================================================================================================
CDK - important Commands to know 

command					Description
npm install -g aws-cdk-lib            install teh CDK CLI and libs
cdk init app				Create a new CDK project from specified template
cdk synth				Synchronizes and prints the CloudFormation template
cdk bootstrap 				Deploys the CDK Toolkit staging Stack
cdk deploy				Deploy the Stacks
cdk diff				View differences of local CDK and deployed Stack
cdk destroy				Destroy the Stacks
---------------------------------------------------------------------------------------------------------------
CDK - Bootstrapping
	The process of provisioning resources for CDK before you can deploy CDK apps into  an AWS environment
	AWS Environment = account & region
	CloudFormation Stack called CDKToolkit is created and contains:
		S3 Bucket - to store files
		IAM Roles - to grant permissions to perform deployments
	You must run the following command for each new environment:
		cdk bootatrap aws://<aws_account>/<aws_region>
	Otherwise, you will get an error "Policy statement with one or more invalid principal"

	





	
	
