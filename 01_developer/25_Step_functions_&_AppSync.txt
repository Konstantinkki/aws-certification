AWS Step Function
	Model your workflowsas as state machines (one per workflow)
		Order fulfillment, Data processing
		Web applications, Any workflow
	Written in JSON
	Visualization of the workflow and  the execution of the workflow, as well as history
	Start workflow with SDK call, API Gateway, event Bridge (CloudWatch Event)
------------------------------------------------------------------------------------------
Step Function - Task State
	Do some work in your state machine
	Invoke one AWS service
		Can invoke a Lambda function
		Run an AWS Batch job
		Run an ECS task and wait for it to complete
		Insert an item from DynamoDB
		Publish messages to SNS, SQS
		Launch another Step Function workflow...
	Run an one Activity
		Ec2, ECS, on-permises
		Activities poll the Step functions for work
		Activities send results back to Step Function
------------------------------------------------------------------------------------------
Example - Invoke Lambda Function
	"Invoke Lambda function":{
		"Type":"Task",
		"Resource":"arn:aws:states:::lambda:invoke",
		"Parameters":{
			"FunctionName":"arny:aws:lambda:REGION:ACCOUNT_ID:function:FUNCTION_NAME",
			"Payload": {
				"Input.$":"$"
			}
		
		},
		"Next":"NEXT_STATE",
		"TimeoutSeconds":300

	}
--------------------------------------------------------------------------------------------
Step Function - States
	Choice State - Test for a condition to send to a branch (or default branch)
	Fail or Succeed State - Stop execution with failure or success
	Pass State - Simply pass its input to its output or inject some fixed data, without performing work.
	Wait State - Provide a delay for a certain amount of time or untill a specified time/date
	Map State - Dynamically iterate steps.
	Parallel State - Begin parallel branches of execution
=================================================================================================
Error Handling in Step Function
	Any state can encounter runtime errors for various reasons:
		State machine definition issues( for Example, no matching rule in a chouse state)
		Task Failures (for example : an exception in a Lambda function)
		Transient issues (for example network partition Events)
	Use Retry (to retry failed state) and Catch (transition to failure path) in the State Machine to handle the errors instead of inside the App Code
	Predefined error codes:
		States.All : matches any error name
		States.Timeout: Task run longer than TimeoutSeconds or no heartbeat received
		States.TaskFailed: execution failure
		States.Permissions: insuffient privileges to execute code
	The state may report is own error
--------------------------------------------------------------------------------------------------
Step Function - Retry (Task or Parallel State)
	Evaluated from top to bottom
	ErrorEquals: match a specific kind of error
	IntervalSeconds: initial delay before retrying
	BackoffRate: multiple the delay after each retry
	MaxAppempts: default to 3, set to 0 for never retried
	When Max attempts are reached, the Catch kicks in

"HelloWorld":{
"Type": "Task",
"Resource":"arn:aws:lambda:REGION:ACCOUNT_ID:function:FUNCTION_NAME",
"Retry":[
{
"ErrorEquals":["CustomerError"],
"IntervalSeconds":1,
"MaxAttempts": 2,
"BackoffRate":2.0
},
{
"ErrorEquals":["States.TaskFailed"],
"IntervalSeconds":1,
"MaxAttempts": 2,
"BackoffRate":2.0
},
{
"ErrorEquals":["States.ALL"],
"IntervalSeconds":1,
"MaxAttempts": 2,
"BackoffRate":2.0
}
],
"End":true
}
----------------------------------------------------------------------------------------------------------
Step Functions - Catch (Task or Paralles State)
	Evaluated from top to bottom
	ErrorEquals: match a specific kind of error
	Next: State to send to
	ResultPath - A path that determines what input is send to the state specified in the next field
	
"HelloWorld":{
"Type": "Task",
"Resource":"arn:aws:lambda:REGION:ACCOUNT_ID:function:FUNCTION_NAME",
"Catch": [
{
"ErrorEquals":["CustomError"],
"Next":"CustomErrorFallback"
},
{
"ErrorEquals":["States.TaskFailled"],
"Next":"ReservedTypeFallback"
},
{
"ErrorEquals":["States.ALL"],
"Next":"NewTask" ,
"ResultPath":"$.error"
},
],
"End":true
},
"CustomErrorFallback":{

"Type":"Pass",                                                                                            
"Result" : "This is a fallback from a custom lambda function exception"
"End" :true

}
}
----------------------------------------------------------------------------------------------------------
Step Function - ResultPath
	Include the error in the input
{"foo":"bar"}  - INPUT

{                - OUTPUT WITH ERROR USING RESULTS
"foo":"bar",
"error":{
"Error": "Error here"
}
}
===========================================================================================================
Step Function - Wait for Task Token
	Allows you to pause Step functions during a Task until a Task Token  is returned
	Task might wait for other AWS services, human approval, 3rd party integration, call legacy systems...
	Append .waitForTaskToken  to the Resource field to tell Step Function to wait for the Task Token to be returned
	Task will pause untill it receives that Task Token back with a SendTaskSuccess or SendTaskFailure API call
----------------------------------------------------------------------------------------------------------
Step Function  - Activity Tasks
	Enables you to have the Task work performed by an Activity Worker
	Activity Worker apps can be running on EC2, Lambda, Mobile device
	Activity Worker poll for a Task using GetActivityTask API
	After Activity Worker completes its work, it sends a response of its success/failure using SendTaskSuccess or SendTaskFailure
	Ti keep the Task active :
		Configure how long a task can wait by setting TimeoutSeconds
		Periodically send a heartbeat from your Activity Worker using SendTaskHeartBeat within the time you set in HeartBeatSeconds
	By configuring a long TimeoutSeconds and actively sending a heartbeat, Activity Task can wait up to 1 year
=============================================================================================================
AWS AppSync - Overview
	AppSync is a managed service that uses GraphQL
	GraphQL makes it easy for applications to get exacply the data the need 
	This includes combining data from one or more sources
		NoSQL data stores, Relational databases, HTTP APIs ...
		Integrates with  DynamoDB, Aurora, OpenSearch & others
		Custom sources with AWS Lambda
	Retrive data in real-time with WebSocket or MQTT on WebSocket
	For mobile apps: local data access & data synchronization
	it all starts with uploading one GraphQL schema
---------------------------------------------------------------------------------------------------------
AppSync - Security
	There are four ways tyou can authorize applications to interract with your AWS AppSync GraphQL API
	API_KEY
	AWS_IAM : IAM users / roles/ cross-account access
	OPENID_CONNECT :OpenId Connect provider / JSON Web Token
	AMAZON_COGNITO_USER_POOLS

	For custom domain & HTTP, use CloudFront in front of AppSync
================================================================================================================
AWS Amplify - Create mobile and web applications
	Amplify Studio - visual build a full-stack app, both front-end UI and a backend
	Amplify CLI - Configure an Amplify backend With a gu7ided CLI workflow
	Amplify Libraries - Connect your app to existing AWS Services (Cognito S3 and more)
	Amplify Hosting - Host secure, reliable fast web apps or websites via the AWS content delivery network
-----------------------------------------------------------------------------------------------------------------
AWS Amplify
	Set of tools to get started with creating mobile and web applications
	"Elastic Beanstalk for mobile and web applications"
	Must-have features such as data storage, authentication, storage, and machine-learning, all powered by AWS services
	Front-end libraries with ready-to-use components for React, Vue, JS, iOS, Android, Flutter, etc...
	Incorporates AWS best practices to for reliability, security, scalability
	Build and deploy with the Amplify CLI or Amplify Studio
-----------------------------------------------------------------------------------------------------------------
AWS Amplify - Important Features
	amplify add auth - AUTHENTICATION (Cognito)
		Leverages Amazon Cognito
		User registration, authentication, account recovery & other operations
		Support MFA, Social Sign-in, etc...
		Pre-build UI components
		Fine-grained authorization

	amplify add api  - DATASTORE
		Leverages Amazon AppSync and Amazon DynamoDB
		Work with local data and have automatic synchronization to the cloud without complex code
		Powered by GraphQL
		Offline and real-time capabilities
		Visual data modeling w/ Amplify Studio

	amplify add hosting - HOSTING
		Build and Host Modern Web Apps
		CICD (build, test, deploy)
		Pull Request Previews
		Custom Domains
		Monitoring
		Redirect and custom headers
		Password Protection
--------------------------------------------------------------------------------------------------------------------
AWS Amplify - End-to-End (E2E) Testing
	Run end-to-end (E2E) tests in the test phase in Amplify
	Catch regressions before pushing code to production
	Use the test step to run any test commands at build time (amplify.yml)
	Integrated with Cypress testing framework
		Allows you to generate UI report for your tests

	Build -----> Test (E2E)------------>Deploy
======================================================================================================================

	

		


	 

























