AURORA - proprietary(not open source) technology from AWS 
Postgress and MySQL are both supported as Aurora DB ( pg and mysql drivers will work with Aurora like with pg mysql database)
Aurora - AWS cloud Optimized 
	mysql on RDS 5x faster
	postgress on RDS 3x faster
Aurora automatically grows from 10Gb up to 128Gb
Aurora can have up to 15 replicas and the replication process is faster  than MySQL (10 ms replica lag)
failover in aurora is instantaneous(immidetly), it's High Availability native
Aurora costs more than RDS (20% more) - but is more efficient

=============================

Aurora Hihg Availability and Read Scaling
	6 copies of my data across 2 AZ
		4 copies out of 6 for writes
		3 copies out of 6 for reads
		Self healing with peer-to-peer replication
		Storage is stripes across 100s volumes
	One Aurora instance takes writes(master)
	Automatic failover for master in less than 30 seconds
	Master + up to 15 Aurora Read Replicas serve reads
	Support for Cross Region Replication 

================================
Aurora DB Cluster

			Client 
 write endpoint 			Reader endpoint
pointing to the master            Connection to load Balancer

==================================
Features of Aurora

Automatic failover
Backup and recovery
Isolation and Security
Industry compliance
push button scaling
Automated Patching with Zero Downtime
Advanced Monitoring
Routine Maintenance
Backtrack: restore data at any point of time without using backups

========================================

RDS & Aurora security
  at-rest encryption
    Database master & replicas encryption using AWS KMS - must be defined as launch time
    if the master is not encrypted, the read replicas cannot be encrypted
    to encrypt an un-encrypted database, go through a DB snapshot & restore as encrypted
  In-flight encryption: TLS-ready by default, use the AWS TLS root certificates client-side
  IAM Authentication : IAM roles to connect to your database (instead of username/password)
  Security Groups : Control Network access to your RDS/Aurora DB
  No SSH available except on RDS Cuatom
  Audit logs can be enabled and sent to CloudWatch Logs for longer retention

========================================

Amazon RDS Proxy
  Fully managed database proxy for RDS
  Allows apps to pool and share DB Connections established with database
  Improving database efficiency by reducing the stress on database resources (CPU RAM) and minimize open connections (and timeouts)
  Serverless, autoscaling, highly available (Multi AZ)
  Reduced RDS & Aurora failover time by up 66%
  Supports RDS (MySQL, PostgreSQL, MariaDB, MS SQL Server) and Aurora (MySQL, PostgreSQL)
  no code changes reqiored for most apps
  Enforce IAM Authentication for DB, and securely store credentials in AWS Secret Manager
  RDS Proxy is never publicy accessible (must be accessed from VPC)  

========================================

Amazon ElastiCache Overview 
  The same way RDS is to get managed Relational Databases ...
  ElastiCache is to get managed Redis or Memcached
  Caches are in-memory databases with really high performance, low latency
  Helps reduce load off of databases roe read intensive workloads
  Helps make your application stateless
  AWS takes care of OS maintenance/patching, optimizations, setup, configuration, monitoring, failure recovery and backups
  Using ElastiCache involves HEAVY application code changes

=======================================

ElastiCache  - Solution Architecture - DB Cache
  Application queries ElastiCache, if not available , get from RDS and store in ElastiCache
  Helps relieve load in RDS
  Cache must have an invalidation strategy to make sure only the most current data is used in threre

Second solution : 
ElastiCache - SOlution architecture - User Session Store
  User log into any of the application
  The application writes the session data into ElastiCache
  The User hits another instance of our application
  The Instance retrives the data and the user is already logged in 

======================================

ElastiCache - Redis vs Memcached

REDIS : 
  Multi AZ with Auto-Failover
  Read Replicas to scale reads and have high availability
  Data Durability using AOF repsistence
  Backup and restore features
  Supports Sets and Sorted Sets

MEMCACHED : 
  Multi-node for partitioning of data (Sharding)
  No high availability (replication)
  Non Persistent
  No Backup and restore
  Multi-threaded architecture
    
=========================================

Caching Implementation Considerations
  Read more : https://aws.amazon.com/caching/implementation-considerations
  is it safe to cache data ? Data may be out of date, eventually consistent
  is caching effective for that data?
    Pattern : data changing slowly, few keys are frequently needed
    Anti patterns : data changing rapidly. all lerge key space frequently needed
  Is data structured well for caching?
    example : key value caching, or caching of aggregations results

  Which caching design pattern is the most appropriate?

  Lazy Loading / Cache-Aside / Lazy Population    

  solutions : 
  
   Lazy Loading: 
    application -> ask cache first -> if no data found -> app asks database-> app writes data to cache 

    + Only requested data is cached
    + Node failures are not fatal

    - if no data in cache - 3 steps 
    - data can be updated in the DB - and it will be outdated in cache

  Write Through:
   Add or Update cache when database is updated
    application -> writes to cache after DB was updated 

    + Data in cache is never stale, reads are quick
    + each Cache write requires 2 calls

    - Missing Data until it is added/updated in the DB - fix is implementing Lazy Loading 
    - Cache churn - a lot of the data will never be read

=============================================

Cache evictions and Time-To-Live (TTL)
  Cache eviction can occure in three ways : 
    you delete the item explicitly in the cache
    Item is evicted because the memory is full and it's not recently used (LRU)
    You set an item time-to-live (TTL)
  TTL are helpful for any kind of data: 
    Leaderboards
    Comments
    Activity streams
  TTL can range from few seconds to hours or days

  If too many evictions happen due to memory, you should scale up or out

==============================================

Amazon MemoryDB for Redis
  Redis-compatible, durable, in-memory database service
  Ultra-fast performance with over 160 millions requests/seconds
  Durable in-memory data storage with Multi-AZ transactional log
  Scale seamlessly from 10s GBs to 100s TBs of storage
  Use cases: web and mobile apps, online gaming, media streaming, ...






  


