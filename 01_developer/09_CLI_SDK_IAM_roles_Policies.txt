EC2 Instance Metadata (IMDS)
	AWS EC2 instance Metadata (IMDS) is powerful but one the last known features to developers
	It allows AWS EC2 instances to "learn about themselves" without using an IAM Role for that purpose
	The URL is http://169.254.169.254/latest/meta-data
	You can retrive the IAM Role name from the metadata, but you CANNOT retrive the IAM Policy
	Metadata = info about the EC2 instance
	Userdata = launch script of the EC2 instance
======================================================

IMDSv2 vs IMDSv1
	IMDSv1 is accessing http://169.254.169.254/latest/meta-data directly
	IMDSv2 is more secure and is done in to steps:
		1. Get Session Token (limited Validity) - useng Headers & PUT
			$ TOKEN= 'curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"'
		2. Use Session token in IMDSv2 calls - using headers
			$ curl http://169.254.169.254/latest/meta-date/profile -H "X-aws-ec2-metadata-token: $TOKEN"
======================================================
AWS Profiles : 
	show current profile info : aws configure list
	show all profiles : aws configure list-profiles

	cd ~/.aws
	aws configure --profile my-second-account
	enter access key and secret access key and default region name and deffault output format (json xml)

	using profile example : 
		aws s3 ls --profile my-second-account

======================================================
MFA with CLI
	To use MFA with the CLI, you must create a temporary session
	To do so, you must run the STS GetSessionToken API call

	aws sts get-session-token --serial-number arn-of-the-mfa-device --token-code code-from-token --duration-seconds 3600

	{
		"Credentinals" : {
		 	"SecretAccessKey":"secret-access-key",
			"SessionToken":"temporary-session-token",
			"Expiration":"experation-date-time",
			"AccessKeyId":"access-key-id"
		}
	}	

EXAMPLE :
	request :
		aws sts get-session-token --serial-number arn:aws:iam::630844037288:mfa/s10-phone --token-code 413855
	responce: 
		{
                   "Credentials": {
                      "AccessKeyId": "ASIAZFYJ4DCUC6AZQEST",
                      "SecretAccessKey": "yLOekb/3AtwdYwON3bANwdB+skxgyLQhkVjwFn37",
                      "SessionToken": "IQoJb3JpZ2luX2VjELL//////////wEaCmV1LW5vcnRoLTEiRzBFAiBIxK3cXCXvPGSuq3FYwdxwFNYNyAiWAmMpJ2nnJlgIBgIhANKIai3ra7ZU6Mrln7O6TNREdcITPLSD025pTza8II2jKu8BCHsQAhoMNjMwODQ0MDM3Mjg4IgyaAquvm5qLeC258HwqzAEUy+IyE50ukzBE+mTk/UyO7zQzVVhPCmyTMa019Wlfedg1S1vxxtnstjxrF+H2dg1o3lse/2vsE3/yrenMdADr5LqEr3TPAC6KHaMBwGhXOcn9u+XEvcxc8g6plErZI49PUvoPK2zv3osIlO0f+HC5cTZhZyg2flzObTDpXrA/CMo6EPiyLZNky6rJO2JA3V2rRerNpsUfGjeaXQ2DRYkro+nMemJgkRt7Qve5dmKECb5LYkAygv4CsePq0ahrfvKWyvy14h80RdMczSIw25mupwY6mAF32fM9vkyHvuCUwYZThtQjq3PLRb6yehn9Z3os4yRhb/9I+uiNkt13W1NQKlNAtn3PleQ4PBrHI+T7SD76ZinakH0Sy0kQty51eFIe5aNhZkUehlBhEvEvDDH6xEASbmFi5D6shZ+R3GScXecrJb2x+L94uI/M+LC2q8y0g+T/Tl+ssewsWP6+nwEJ9CryTqXgzsJhNfglpA==",
                      "Expiration": "2023-08-28T05:50:19+00:00"
                    }
                }

UPDATE credentials file in ~/.aws
        add aws_session_token string to get like this : 
		[mfa]
		aws_access_key_id = ASIAZFYJ4DCUC6AZQEST      
		aws_secret_access_key = yLOekb/3AtwdYwON3bANwdB+skxgyLQhkVjwFn37   
		aws_session_token = IQoJb3JpZ2luX2VjELL//////////wEaCmV1LW5vcnRoLTEiRzBFAiBIxK3cXCXvPGSuq3FYwdxwFNYNyAiWAmMpJ2nnJlgIBgIhANKIai3ra7ZU6Mrln7O

=========================================================
AWS SDK Overview
	We have to use The AWS SDK when coding for AWS Services such as DynamoDB
	Fun fact... the AWS CLI uses the Python  SDK (boto3)
	Good to know : if you don't specify or configure a default  region, then us-east-1 will be chosen by default  
=========================================================

AWS Limits (Quotas)
	API Rate Limits
		Describeinstances API for EC2 has a limit of 100 calls per second
		GetObject on S3 has a limit of 5500 GET per second per prefix
		For Intermittent Errors : implement Exponential Backoff
		For Consistent Errors: request an API throttling limit increase

	Service Quotas (Service Limits)
		Running On-Demand Standard instances : 1152 vCPU
		You can request a service limit increase by opening a ticket
		You can request a service quota increase by using the Service Quotas API
==========================================================

Exponential Backoff (Any AWS service)
	if you get ThrottlingException intermittently, use exponential backoff
	Retry mechanism already included in AWS SDK API calls
	Must implement yourself if using the AWS API as-is or in specific cases
		Must only implement the retries on 5xx server errors and throttling
		Do not implement on the 4xx client errors

==========================================================
AWS CLI Credewntionals Provider Chain
	The CLI will look for credentionals in this order:
		1. Command line options -  --region, --output, --profile
		2. Environment variables - AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_SESSION_TOKEN
		3. CLI credentionals file - aws configure
			~/.aws/credentials
		4. CLI configuration file - aws configure
			~/.aws/config
		5. Container credentionals - for ECS tasks
		Instance profile credentionals - for EC2 instance Profiles

=========================================================
AWS SDK Default Credentials Provider Chain
	The Java SDK (example) will look for credentials in this order
		1. Java system properties - aws.accessKeyId and aws.secretKey
		2. Environment variables - AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY
		3. The default credential profiles file - ex at: ~/.aws/credentials, shared by many SDK
		4. Amazon ECS container crewdentials - for ECS containers
		5. Instance profile credentials - used on EC2 instances
==========================================================
AWS Credentials Scenario
	An application deployed on an EC2 instance is using environment variables with credentials from an IAM user to call the Amazon S3 API
	The IAM user has S3FullAccess permissions
	The application only uses one S3 bucket, so according to best practices: 
		An IAM Role & EC2 Instance Profile was created for the EC2 instance
		The Role was assigned the minimum permissions to access that one S3 bucket

	The IAM instance Profile was assigned to the EC2 instance, but it still had access to all S3 buckets. Why?
		the credentials chain is still giving priorities to the environment variables 

===========================================================
AWS Credentials Best Practices
	Overall, NEVER EVER STORE AWS CREDENTIALS IN YOUR CODE 
	Best practice is for credentials to be inherited from the credentials chain

	IF using working within AWS, use IAM Roles
		=> EC2 Instances Roles for EC2 Instances
		=> ECS Roles for ECS tasks
		=> Lambda Roles for Lambda functions
	if working outside of AWS, use environment variables / named profiles

==========================================================
Signing AWS API requests
	When you call the AWS HTTP API, you sign the request so that AWS can identify you, using your AWS credentials (access key & secret key)
	Note : some requests to Amazon S3 don't need to be signed
	if you use the SDK or CLI, the HTTP requests are signed for you

	You should sign an AWS HTTP request using Signature v4 (SigV4)

==========================================================
SigV4 Request examples
	HTTP Header option (signature in Authorization header)
	




		
		













