Why encryption?
	Encryption in flight (SSL)
		Data is encrypted before sending and decrypted after receiving
		SSL certificates help with encryption (https)
		Encryption in flight ensures no MITM (man in the middle attack) can happen
------------------------------------------------------------------------------------------

	Server side encryption at rest
		Data side encryption after being recieved by the server
		Data is decrypted befoere being sent
		It is stored in an encrypted form thanks to a key (usually a data key)
		The encryption/decryption keys myst be managed somewhere and the server must have access to it
-------------------------------------------------------------------------------------------
	Client side encryption
		Data is encrypted by the client and server decrypted by the server
		Data eill be decrypted by a receiving client
		The server should not be able to decrypt the data
		Coult leverage Envelop Encryption
===========================================================================================
AWS KNS (Kay management Service)
	Anytime  you hear "encryption" for an AWS service, it's most likely KMS
	AWS manages encryption keys for us
	Fully managed with IAM for authorization
	Easy way to access controll to your data
	Able to audit KNS key usage using CloudTrial
	Seamlessly integrated into most AWS services (EBS, S3, RDS, SSN ...)
	Never ever store your secrets in aplaintext, expecially in your code!
		KMS Key Encryption also available through API calls (SDK, CLI)
		Encrypted secrets can be stored in the code / environment variables
---------------------------------------------------------------------------------------------
KMS Keys Types 
	KMS Keys is the new name of KNS Customer Master Kay
	Symetric (AES-256 keys)
		Single encryption key that is used to encrypt  and Decrypt
		AWS services that are integrated with KMS use symmetric CMKs
		You never get access to the KMS Jey unencrypted (must call KMS API to use)
	Asymmetric (RSA & ECC kay pairs)
		Public (Encrypt) and private Key (decrypt) pair
		Used for Encrypt/Decrypt, or Sign/Verify operations
		The public key is downloadable, but you can't access the private key unencrypted
		Use case : encryption outside of AWS by users who can't call the KMS API
--------------------------------------------------------------------------------------------
AWS KMS (KEY Management Service)
	Types of KMS Keys:
		AWS Owned Keys (free): SSE-S3, SSE-SQS, SSE-DDB (default key)
		AWS Managed Key: free (aws/service-name, example: aws/rds or aws/ebs)
		Customer managed keys created in KMSL $1/month
		Customer managed keys imported (must be symetric key) : 1$/mo
		+ pay for API call to KMS($0.03/10000 cals)
	Automatic Key rotation:
		AWS-managed KMS Key : automatic every 1 year
---------------------------------------------------------------------------------------------
KMS Key Policies
	Controll access yo KMS keys . "similar" to S3 bucket policies
	Difference: you cannot control access without them 
	
	Default KMS Key Policy:
		Created if you don't provide a specific KMS Key Policy
		Complete access to the key to the root user = entire AWS account
	Custom KMS Key Policy:
		Define users, roles that can access the KMS key
		Define who can administer the key 
		Usefull for cross-account 
----------------------------------------------------------------------------------------------
Copying Snapshorts across accounts
	1 Create a Snapshot, encryptet with your own KMS Key (Customer Managed Key)
	2. Attach a KMS Key Policy to authorize cross-account access
	3. Share the encrypted snapshot
	4. (in target) Create a copy of the Snapshot, encrypt it with CMK in your account
	5. Create a volume from the snapshot


{
"Sid": "Allow use of the key with destination account",
"Effect":"Allow",
"Principal": {
"AWS": "arn:aws:iam::TARGET_ACCOUNT_ID:role/ROLENAME"
},
"Action":[
"kms:Decrypt",
"kms:CreateGrant"
],
"Resource":"*",
"Condition":{
"StringEquals":{
"kms:ViaService":"ec2.REGION.amazonaws.com",
"kms:CallerAccount":"TARGET-ACCOUNT-ID"
}
}
}
===================================================================================================
How does KMS work ?
	API - Encrypt and Decrypt

secret ---> Encrypt API ------------> KMS <---check permissions--> IAM 
		<--enc. secret--if permissions OK 

same for decryption
----------------------------------------------------------------------------------------------------
Envepole Encryption
	KMS Encrypt API call has a limit of 4KB
	if you want to encrypt  > 4KB, we need to use Envelope Encryption
	The main API that will help us is the GenerateDataKey API

	For the exam : anything over 4KB of data that needs to be encrypted must use the Enveelope Encryption == GenerateDataKey API
--------------------------------------------------------------------------------------------------------
Encryption SDK
	The AWS Encryption SDK implemented Envelope Encryption for us
	The Encryption SED also exists as a CLI tool we can install
	Implementation s fot Java, Pythob, C, JS

	Feature - Data Key Caching :
		re-use data keys instead of creating new ones for each encryption
		Helps with reducing the number of calls to KMS with a security trade-off
		Use LocalzCryptoMaterialsCache (max age, max bytes, max number of messages)
------------------------------------------------------------------------------------------------------------
KMS Symetric- API Summary
	Encrypt: encrypt up to 4 KB of data through KMS
	GenerateDataKey : generates a unique symmetryc data ket (DEK)
		returns a plaintext copy of the data key 
		AND a copy that is encrypted under the CMK that you specify
	GenerateDataKeyWithoutPlaintext:
		Generate a DEK to use at some point (not immediately)
		DEK that is encrypted under the CMK that you specify (must use Decrypt later)
	Decrypt : decrypt up to 4 KB of data (including Data Encryption Keys)
	GenerateRandom : Returns a random byte string
------------------------------------------------------------------------------------------------------------
KMS Request QUotas
	When you exceed a request  quota, you get a ThrottlingException
	To respond, use exponential backoff (backoff and retry)
	For cryptographic operations, they share a quota
	This includes requests made by AWS on your behalf (ex: SSE-KMS)
	For GenerateDataKey, consider using DEK caching from the Encryption SDK
	You can request a Request Quotas increase through API or AWS support
------------------------------------------------------------------------------------------------------------
Quotas : 
	API operation					Ewquest quotas (persecond)
Decrypt 					These shared quotas vary with the AWS Region and the type of CMK used the request. 
Encrypt							Each quota is calculated separately
GenerateDataKey (symmetric)                     Symmetric CMK quota:
GenerateDataKeyWithoutPlaintext (symmetric)             5500(shared)
GenerateRandom                                          10000(shared) in the following Regions: 
ReEncrypt                                                   us-east-2, ap-southeast-1, ap-southeast-2, ap-northeast-1, eu-central-1, ue-central-2
Sign(asymmecric)                                        30000(shared) in the following Regions:
Verify (asymmetric)                                         us-east-1, us-east-2, eu-west-1
                                                 Asymmetric CMK quota:
                                                        500 (shared) for RSA CMKs
                                                        300 (shared) for Elliptic curve (ECC)CMKs
=============================================================================================================
S3 Bucket Key for SSE-KMS encryption
	New setting to decrease ...
		Number of API calls made to KMS from  S3 by 99%
		Cost of overall KMS encryption with Amazon S3 by 99%
	This leverages data keys 
		A "S3 bucket key" is generated
		That key is used to encrypt KMS objects with new data keys
	You will see less KMS CloudTrial events in CloudTrial

================================================================================================================
CLoudHSM
	KMS => AWS manages the software for encryption
	CloudHSM => AWS provisions encryption HARDWARE
	Dedicated HArdware (HSM = Hardware Security Module)
	You manage your own encrypion keys entirely (not AWS)
	HSM device is tamper resistant, FIPS 140-2 Level3 compliance
	Supports both symmetric and asymmetric encryption (SSL/TLS keys)
	No free tier available
	Must use the CloudHSM CLient Software
	Redshift supports CLoudHSM for database encryption and key management
	Good option to use with SSE-C encryption
==================================================================================================================
SSM Parameter Store
	Secure storage for configuration and secrets
	Optional Seamless Encryption using KMS
	Serverless, scalable, durable, easy SDK
	Version tracking of configurations/secrets
	Security through IAM
	Notifications with Amazon EventBridge
	Integration with CloudFormation
--------------------------------------------------------------------------------------------------------------------
SSM Parameter Store Hierarchy
	/my-department/
	    my-app/
		dev/
		    db-url
		    db-password
		prod/
		    db-url
		    db-password
	    other-app/
	/other-department/
	/aws/reference/secretsmanager/secret_ID_in_Secrets_Manager
	/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2 (public)
--------------------------------------------------------------------------------------------------------------------
Standard and advanced parameter tiers
					Standard			Advanced
Total number of parameters      	10 000				100 000
allowed (per account and region)

Max size of param value 		4KB				8KB

Parameter policies available		No				Yes
Cost					No addit. charge		Charge apply

Storage Pricing				Free				$0.05  per advanced param per month
--------------------------------------------------------------------------------------------------------------------
Parameters Policies (for advanced parameters)
	Allow to assign a TTL to a parameter (expiration date) to force updating or deleting sensetive data such as passwords
	VCan assign multiple policies at a time
		Expiration
		ExpirationNotification
		NoChangeNotification

=====================================================================================================================
get all ssm params : 
aws ssm get-parameters --names  /my-app/dev/db-url /my-app/dev/db-password

get all ssm params decrypted:
aws ssm get-parameters --names  /my-app/dev/db-url /my-app/dev/db-password --with-decryption

get all ssm params by path:
aws ssm get-parameters-by-path --path /my-app/dev  [--recursive]
=======================================================================================================================
AWS Secrets Manager
	Newer service, meant for storing secrets
	Capability to force rotation of secrets every X days
	Automate generation of secrets on rotation (uses Lambda)
	Integration with Amazon RDS (MySQL, PostgreSQL, Aurora)
	Secrets are encrypted using KMS

	Mostly meant for RDS integration
-------------------------------------------------------------------------------------------------------------------------
AWS Secret Manager - Multi-Region Secrets
	Replicate Secrets across multiple AWS Regions
	Secrets Manager keeps read replicas in sync with the primary Secret
	Ability yo promote a read replica Secret to a standalone Secret
	Use cases: multi-region apps, disaster recovery strategies, multi-region DB...
==========================================================================================================================
SSM Parameter Store vs Secret Manager

	Secret Manager ($$$ expencive):
		Automatic rotation of secrets with AWS Lambda
		Lambda function is provided for RDS, Redshift, DocumentDB
		KMS encryption is mandatory
		Can integration with CloudFormation

	SSM Parameter store ($) :
		Simple API
		No secret rotation (Can enable rotation using Lambda triggered by EventBridge)
		KMS encryption is optional
		Can Integration with CloudFormation
		Can pull a Secret Manager secret using the SSM Parameter Store API
---------------------------------------------------------------------------------------------------------------------------
SSM Parameter Store vs Secret Manager Rotation

	AWS Secret Manager
AWS SM---invoke--->Lambda----changes passwords--->Amazon RDS

	SSM Parameter Store
	                        ----change pass-------> Amazon RDS
EventBridge---invoke--->Lambda
                                ----change value------->SSM Parameter Store
==============================================================================================================================
CloudWatch Logs - Encryption
	You can encrypt CLoudWatch logs with KMS keys
	Encryption is enabled at the log group level, by associating a CMK with a log group, either when you create the log group or after it exists.
	You cannot associate a CMK with a log group using the CloudWatch console

	You must use the CLoudWatch Logs API:
		associate-kms-key : if the log group already exists
		create-log-groupt: if the log group doesn't exists yet
=================================================================================================================================
AWS Nitro Enclaves
	Process highly sensitive data in an isolated compute environment 
		Personally identifiable Information (PII), healthcase, financial ...
	Fully isolated virtual machines, hardened, and highly constrained 
		Not a container, not persistent storage, no interactive access, no external networking
	Helps reduce the attack surface for sensitive data processing apps
		Aryptographic Attestation - only authorized code can be running in your Enclave
		Only Enclaves can access sensitive data (integration with KMS)
	Use cases: securing private keys, processing credit cards, secure multi-party computation...

 
 





























	
