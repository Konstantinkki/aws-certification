S3 Encryption

Anazon S3 - Object Encryption
	you can encrypt objects in S3 buckets using of 4 methods
	  Server-Side Encryption (SSE)
		Server-Side Encryption with Amazon S3-Managed Keys (SSE-S3) - Enabled by Default
		  Encrypts S3 objects using keys handled, managed and owned by AWS
		Server-Side Encryption with KMS Keys stored in AWS KMS (SSE-KMS)
		  Leverage AWS Key Management Service (AWS KMS) to manage encryption keys
		Server-Side Encryption with Customer-Provided Keys (SSE-C)
		  When you want to manage your own encryption keys
	  Client-Side Encription
	  It's important to understand which ones are for which situation for the exam
---------------------------------------------------------------------------------------------
Amazon S3 Encryption - SSE-S3
	Encription using keys handled, managed, and owned by AWS
	Object is encrypted server-side
	Encription type is AES-256
	Must set header "x-amz-server-side-encryption":"AES256"
	Enabled by default for new buckets & new objects
---------------------------------------------------------------------------------------------
Amazon S3 Encryption - SSE-KMS
	Encryption using keys handled and managed by AWS KMS(Key Management Service)
	KMS advantages : user control + audit key usage using CloudTrial
	Object is encrypted server side
	Must set header "x-amz-server-side-encryption":"aws:kms"
---------------------------------------------------------------------------------------------
SSE-KMS Limitation
	if you use SSE-KMS, you may be impacted by the KMS Limits
	When you upload< it calls the GenerateDataKey KMS API
	When you download, it calls the Decrypt KMS API
	Count towards the KMS quota per second
	(5500, 10000, 30000 req/s based on region)
	You can request a quota increase using the Service Quotas Console
---------------------------------------------------------------------------------------------
Amazon S3 Encryption - SSE-C
	Server-Side Encryption using keys fully managed by the customer outside of AWS 
	Amazon S3 DOES NOT store the encryption key you provide
	HTTPS must be used 
	Encryption key must provided in HTTP headers, for EVERY HTTP request made
---------------------------------------------------------------------------------------------
Amazon S3 Encryption - Client-Side Encryption
	Use client libraries such as Amazon S3 Client-Side Encryption Library
	Client must encrypt data themselves before sending to Amazon S3
	Client must decrypt data themselves when retriving from Amazon S3
	Customer fully manages the keys and encryption cycle
---------------------------------------------------------------------------------------------
Amazon S3 - Encryption in transit(on a fly) (SSL/TLS) 
	Encryption in flight is also called SSL/TLS
	Amazon S3 exposes two endpoints:
		HTTP Endpoint - non encrypted
		HTTPS Endpoint - encryption in flight
	HTTPS is recommended
	HTTPS is mandatory for SSE-C
	Most clients would use the HTTPS endppoint by deffault
---------------------------------------------------------------------------------------------
Amazon S3 - Force Encryption in Transit
aws:SecureTransport
	{
	 "Version": "2012-10-17",
	 "Statement": [
	     {
	       "Effect": "Deny",
		"Principal": "*",
		"Action":"s3:GetObject",
		"Resource":"arn:aws:s3:::my-bucket/*",
		"Condition":{
		  "Bool":{
		     "aws:SecureTransport":"false"
   		   }
		}
             }
	 ]
	}

this rule deny access users by HTTP, but allows users by HTTPS
---------------------------------------------------------------------------------------------
DSSE-KMS (Double Side Server Encryption - Key Management Service)
==============================================================================================
S3 Default Encryption
	Amazon S3 - Default Encryption vs. Bucket Policies
		SSE-S3 encription is automatically applied to new objects stored in S3 bucket
		Optionally, you can "force encryption" using a bucket policy and refuse any API call 
		to PUT an S3 object without encryption headers (SSE-KMS or SSE-C)
        {                                                      
	"Version": "2012-10-17",                                                                                                                                      
	"Statement": [                                                                                                                                                    
	    {                                                                                                                                                               
		"Effect": "Deny",                                                                                                                                              
		"Principal": "*",                                                                                                                                             
		"Action":"s3:PutObject",                                                                                                                                      
		"Resource":"arn:aws:s3:::my-bucket/*",                                                                                                                        
		"Condition":{                                                                                                                                                   
			"StringNotEquals":{                                                                                                                                                         
				"s3:x-amz-server-side-encryption":"aws:kms"                                                                                                                               
			}                                                 
			OR this constraint: 
			"Null": {
				"s3:x-amz-server-side-encryption-customer-algorithm":"true"
			}                                                                                                         
		      }                                                                                                                                                          
		   }                                                                                                                                                         
		]                                                                                                                                                            
	    } 
NOTE : Bucket Policies are evaluated before "Default Encryption"
===================================================================================================
S3 CORS
	What is CORS?
		Cross-Origin Resource Sharing (CORS) 	
		Origin = scheme(protocol) + host(domain) + port
			example : https://www.example.com (implied port is 443 for HTTPS, 80 for HTTP)
		Web Browser based mechanism to allow requests xto other origins while visiting the main origin
		The requests won't be fulfilled unles the other origin allows for the requests, using CORS Headers
		(example: Access-Control-Allow-Origin)
----------------------------------------------------------------------------------------------------
	if a client makes a cross-origin request on our S3 Bucket, we need to enable the correct CORS headers
	it's a popular exap question 
	You can allow for a specific origin or for * (all origins)

		Get /index.html
		Host: http://mybucket-html.s3.....
	   ------------------------------------------------>     S3 Bucket (my-bucket-html)(Static webSite enabled)
Browser                 index.html
           <-----------------------------------------------

            Get /images/coffee.jpg
	    Host: http://my-bucket-assets.s3......
	    Origin: http://my-bucket-html.s3......	
	   ------------------------------------------------->    S3 Bucket (my-bucket-assets)(static website Enabled)
	   <-------------------------------------------------
		Access-Control-Allow-Origin: http://my-bucket-html.s3....... 
=======================================================================================================
Amazon S3 - MFA Delete
	MFA (Multi-Factor Authentication) - force users to generate a code on a device 
		(usually a mobile phone or hardware) before doing important operations on S3
	MFA will be required to :
		Permanently delete an object version
		SuspendVersioning on the bucket
	MFA won't be required to : 
		Enable Versioning
		List deleted versions
	To use MFA Delete, Versioning must be enabled on the bucket
	Only the bucket owner (root account) can enable/disable MFA Delete


Configure MFA Delete possible only with CLI
first get root access keys : root account button -> security credentials -> Access Keys ->download/generate key 
configure profile : aws configure --profile <profile-name>
		    AWS Access Key ID [None] : fsdfsfdfsdfsdfd
		    Aws Secret Acces Key [None] : hjsdhfg;ksdh;glahjsf;lghadl;kghsdf;lh
		    Deffault region name [None] : eu-west-111 
		    Default output format [None] : 

		    aws s3 ls -- profile <profile-name>  - Show list of buckets
		    aws s3api put-bucket-versioning --bucket <bucket-name> --versioning-configuration Status=Enabled, MFADelete=Enabled 
			-mfa "arn of bucket" --profile <profile-name>
=========================================================================================================
S3 Access Logs
	For audit purpose, you may want to log all access to S3 bucket 
	Any request made to S3, from any account, authorized or denied, will be logged into another S3 bucket
	That data can be analyzed using data analisys tools ...
	The Target logging bucket must be in the same AWS region
---------------------------------------------------------------------------------------------------------
S3 Access Logs: Warning
	DO not set your logging bucket to the monitored bucket 
	it will create a monitoring LOOP, and your bucket will be grow exponentially
<bucket-name> -> properties -> Server access logging -> Enable (and selec destination bucket)
=========================================================================================================
Amazon S3 - Pre-Signed URLs  - generated URL for access to private bucket files 
	Generate pre-signed URLs using S3 Console, AWS CLI or SDK
	Url Expiration :
		S3 Console - 1 min to 12 hours
		AWS CLI - configure expiration with  --expires-in param in seconds (def 3600 sec max 604800 sec 168 h)
	Users given a pre-signed URL inherit the permissions of the user that generated the URL for GET/PUT

	Examples : 
		Allow only logged-in users to download a premium video from your S3 bucket
		Allow an ever-changing list of users to download files by generating URL's dynamically
		Allow temporarily a user to upload a file to a precise location- in your S3 bucket

<bucket-name> -> file -> Object action -> Share with a presigned URL
==========================================================================================================
S3 Access Points - point with policyes allowed to access to some(or few) folder in the S3
	Access POints simplify security management for S3 Buckets
	Each Access Point has:
		its own DNS name(Internet origin or VPC Origin)
		an access point policy (similar to bucket policy) - manage security at acale
----------------------------------------------------------------------------------------------------------
S3 - Access Points - VPC Origin
	We can define the access point to be accessible only from within the VPC
	You must create a VPC Endpoint to access the Access Point (Gateway or Interface Endpoint)
	The VPC Endpoint Policy must allow access to the Target bucket and Access Point

	VPC = EC2 + VPC Endpoint (has Endpoint policy)
	Access Point VPC Origin (has access point policy)
	S3 Bucket (has bucket policy)

	EC2 -> VPC -> Access Point -> S3 Bucket
		All 3 policy should allow get object 	
===========================================================================================================
S3 Object Lambda   - may be used for update object from S3 to User on a fly
	Use AWS Lambda Functions to change the object before it is retrived by the caller application
	Only one S3 bucket is needed, on top of which we create S3 Access Point and S3 Object Lambda Access Points
	Use Cases: 	
		Redacting personally identifiable information for analysis or non-production environments
		Converting across data formats, such as converting XML to JSON
		Resizing and watermarking images on the fly using caller-specific details, such as the user who requested the object
S2 bucket -> Support S3 Access Point -> redacting Lambda Function -> S3 Object Lambda Access Point -> Client APP



























                 
 